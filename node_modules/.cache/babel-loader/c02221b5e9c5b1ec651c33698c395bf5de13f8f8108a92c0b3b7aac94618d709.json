{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n/*!\n * OverlayScrollbars\n * Version: 2.10.0\n *\n * Copyright (c) Rene Haas | KingSora.\n * https://github.com/KingSora\n *\n * Released under the MIT license.\n */\nconst createCache = (t, n) => {\n  const {\n    o: o,\n    i: s,\n    u: e\n  } = t;\n  let c = o;\n  let r;\n  const cacheUpdateContextual = (t, n) => {\n    const o = c;\n    const l = t;\n    const i = n || (s ? !s(o, l) : o !== l);\n    if (i || e) {\n      c = l;\n      r = o;\n    }\n    return [c, i, r];\n  };\n  const cacheUpdateIsolated = t => cacheUpdateContextual(n(c, r), t);\n  const getCurrentCache = t => [c, !!t, r];\n  return [n ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache];\n};\nconst t = typeof window !== \"undefined\" && typeof HTMLElement !== \"undefined\" && !!window.document;\nconst n = t ? window : {};\nconst o = Math.max;\nconst s = Math.min;\nconst e = Math.round;\nconst c = Math.abs;\nconst r = Math.sign;\nconst l = n.cancelAnimationFrame;\nconst i = n.requestAnimationFrame;\nconst a = n.setTimeout;\nconst u = n.clearTimeout;\nconst getApi = t => typeof n[t] !== \"undefined\" ? n[t] : void 0;\nconst _ = getApi(\"MutationObserver\");\nconst d = getApi(\"IntersectionObserver\");\nconst f = getApi(\"ResizeObserver\");\nconst v = getApi(\"ScrollTimeline\");\nconst isUndefined = t => t === void 0;\nconst isNull = t => t === null;\nconst isNumber = t => typeof t === \"number\";\nconst isString = t => typeof t === \"string\";\nconst isBoolean = t => typeof t === \"boolean\";\nconst isFunction = t => typeof t === \"function\";\nconst isArray = t => Array.isArray(t);\nconst isObject = t => typeof t === \"object\" && !isArray(t) && !isNull(t);\nconst isArrayLike = t => {\n  const n = !!t && t.length;\n  const o = isNumber(n) && n > -1 && n % 1 == 0;\n  return isArray(t) || !isFunction(t) && o ? n > 0 && isObject(t) ? n - 1 in t : true : false;\n};\nconst isPlainObject = t => !!t && t.constructor === Object;\nconst isHTMLElement = t => t instanceof HTMLElement;\nconst isElement = t => t instanceof Element;\nconst animationCurrentTime = () => performance.now();\nconst animateNumber = (t, n, s, e, c) => {\n  let r = 0;\n  const a = animationCurrentTime();\n  const u = o(0, s);\n  const frame = s => {\n    const l = animationCurrentTime();\n    const _ = l - a;\n    const d = _ >= u;\n    const f = s ? 1 : 1 - (o(0, a + u - l) / u || 0);\n    const v = (n - t) * (isFunction(c) ? c(f, f * u, 0, 1, u) : f) + t;\n    const p = d || f === 1;\n    e && e(v, f, p);\n    r = p ? 0 : i(() => frame());\n  };\n  frame();\n  return t => {\n    l(r);\n    t && frame(t);\n  };\n};\nfunction each(t, n) {\n  if (isArrayLike(t)) {\n    for (let o = 0; o < t.length; o++) {\n      if (n(t[o], o, t) === false) {\n        break;\n      }\n    }\n  } else if (t) {\n    each(Object.keys(t), o => n(t[o], o, t));\n  }\n  return t;\n}\nconst inArray = (t, n) => t.indexOf(n) >= 0;\nconst concat = (t, n) => t.concat(n);\nconst push = (t, n, o) => {\n  !o && !isString(n) && isArrayLike(n) ? Array.prototype.push.apply(t, n) : t.push(n);\n  return t;\n};\nconst from = t => Array.from(t || []);\nconst createOrKeepArray = t => {\n  if (isArray(t)) {\n    return t;\n  }\n  return !isString(t) && isArrayLike(t) ? from(t) : [t];\n};\nconst isEmptyArray = t => !!t && !t.length;\nconst deduplicateArray = t => from(new Set(t));\nconst runEachAndClear = (t, n, o) => {\n  const runFn = t => t ? t.apply(void 0, n || []) : true;\n  each(t, runFn);\n  !o && (t.length = 0);\n};\nconst p = \"paddingTop\";\nconst h = \"paddingRight\";\nconst g = \"paddingLeft\";\nconst b = \"paddingBottom\";\nconst w = \"marginLeft\";\nconst y = \"marginRight\";\nconst S = \"marginBottom\";\nconst m = \"overflowX\";\nconst O = \"overflowY\";\nconst $ = \"width\";\nconst C = \"height\";\nconst x = \"visible\";\nconst H = \"hidden\";\nconst E = \"scroll\";\nconst capitalizeFirstLetter = t => {\n  const n = String(t || \"\");\n  return n ? n[0].toUpperCase() + n.slice(1) : \"\";\n};\nconst equal = (t, n, o, s) => {\n  if (t && n) {\n    let e = true;\n    each(o, o => {\n      const c = s ? s(t[o]) : t[o];\n      const r = s ? s(n[o]) : n[o];\n      if (c !== r) {\n        e = false;\n      }\n    });\n    return e;\n  }\n  return false;\n};\nconst equalWH = (t, n) => equal(t, n, [\"w\", \"h\"]);\nconst equalXY = (t, n) => equal(t, n, [\"x\", \"y\"]);\nconst equalTRBL = (t, n) => equal(t, n, [\"t\", \"r\", \"b\", \"l\"]);\nconst noop = () => {};\nconst bind = (t, ...n) => t.bind(0, ...n);\nconst selfClearTimeout = t => {\n  let n;\n  const o = t ? a : i;\n  const s = t ? u : l;\n  return [e => {\n    s(n);\n    n = o(() => e(), isFunction(t) ? t() : t);\n  }, () => s(n)];\n};\nconst debounce = (t, n) => {\n  const {\n    _: o,\n    v: s,\n    p: e,\n    S: c\n  } = n || {};\n  let r;\n  let _;\n  let d;\n  let f;\n  let v = noop;\n  const p = function invokeFunctionToDebounce(n) {\n    v();\n    u(r);\n    f = r = _ = void 0;\n    v = noop;\n    t.apply(this, n);\n  };\n  const mergeParms = t => c && _ ? c(_, t) : t;\n  const flush = () => {\n    if (v !== noop) {\n      p(mergeParms(d) || d);\n    }\n  };\n  const h = function debouncedFn() {\n    const t = from(arguments);\n    const n = isFunction(o) ? o() : o;\n    const c = isNumber(n) && n >= 0;\n    if (c) {\n      const o = isFunction(s) ? s() : s;\n      const c = isNumber(o) && o >= 0;\n      const h = n > 0 ? a : i;\n      const g = n > 0 ? u : l;\n      const b = mergeParms(t);\n      const w = b || t;\n      const y = p.bind(0, w);\n      let S;\n      v();\n      if (e && !f) {\n        y();\n        f = true;\n        S = h(() => f = void 0, n);\n      } else {\n        S = h(y, n);\n        if (c && !r) {\n          r = a(flush, o);\n        }\n      }\n      v = () => g(S);\n      _ = d = w;\n    } else {\n      p(t);\n    }\n  };\n  h.m = flush;\n  return h;\n};\nconst hasOwnProperty = (t, n) => Object.prototype.hasOwnProperty.call(t, n);\nconst keys = t => t ? Object.keys(t) : [];\nconst assignDeep = (t, n, o, s, e, c, r) => {\n  const l = [n, o, s, e, c, r];\n  if ((typeof t !== \"object\" || isNull(t)) && !isFunction(t)) {\n    t = {};\n  }\n  each(l, n => {\n    each(n, (o, s) => {\n      const e = n[s];\n      if (t === e) {\n        return true;\n      }\n      const c = isArray(e);\n      if (e && isPlainObject(e)) {\n        const n = t[s];\n        let o = n;\n        if (c && !isArray(n)) {\n          o = [];\n        } else if (!c && !isPlainObject(n)) {\n          o = {};\n        }\n        t[s] = assignDeep(o, e);\n      } else {\n        t[s] = c ? e.slice() : e;\n      }\n    });\n  });\n  return t;\n};\nconst removeUndefinedProperties = (t, n) => each(assignDeep({}, t), (t, o, s) => {\n  if (t === void 0) {\n    delete s[o];\n  } else if (n && t && isPlainObject(t)) {\n    s[o] = removeUndefinedProperties(t, n);\n  }\n});\nconst isEmptyObject = t => !keys(t).length;\nconst capNumber = (t, n, e) => o(t, s(n, e));\nconst getDomTokensArray = t => deduplicateArray((isArray(t) ? t : (t || \"\").split(\" \")).filter(t => t));\nconst getAttr = (t, n) => t && t.getAttribute(n);\nconst hasAttr = (t, n) => t && t.hasAttribute(n);\nconst setAttrs = (t, n, o) => {\n  each(getDomTokensArray(n), n => {\n    t && t.setAttribute(n, String(o || \"\"));\n  });\n};\nconst removeAttrs = (t, n) => {\n  each(getDomTokensArray(n), n => t && t.removeAttribute(n));\n};\nconst domTokenListAttr = (t, n) => {\n  const o = getDomTokensArray(getAttr(t, n));\n  const s = bind(setAttrs, t, n);\n  const domTokenListOperation = (t, n) => {\n    const s = new Set(o);\n    each(getDomTokensArray(t), t => {\n      s[n](t);\n    });\n    return from(s).join(\" \");\n  };\n  return {\n    O: t => s(domTokenListOperation(t, \"delete\")),\n    $: t => s(domTokenListOperation(t, \"add\")),\n    C: t => {\n      const n = getDomTokensArray(t);\n      return n.reduce((t, n) => t && o.includes(n), n.length > 0);\n    }\n  };\n};\nconst removeAttrClass = (t, n, o) => {\n  domTokenListAttr(t, n).O(o);\n  return bind(addAttrClass, t, n, o);\n};\nconst addAttrClass = (t, n, o) => {\n  domTokenListAttr(t, n).$(o);\n  return bind(removeAttrClass, t, n, o);\n};\nconst addRemoveAttrClass = (t, n, o, s) => (s ? addAttrClass : removeAttrClass)(t, n, o);\nconst hasAttrClass = (t, n, o) => domTokenListAttr(t, n).C(o);\nconst createDomTokenListClass = t => domTokenListAttr(t, \"class\");\nconst removeClass = (t, n) => {\n  createDomTokenListClass(t).O(n);\n};\nconst addClass = (t, n) => {\n  createDomTokenListClass(t).$(n);\n  return bind(removeClass, t, n);\n};\nconst find = (t, n) => {\n  const o = n ? isElement(n) && n : document;\n  return o ? from(o.querySelectorAll(t)) : [];\n};\nconst findFirst = (t, n) => {\n  const o = n ? isElement(n) && n : document;\n  return o && o.querySelector(t);\n};\nconst is = (t, n) => isElement(t) && t.matches(n);\nconst isBodyElement = t => is(t, \"body\");\nconst contents = t => t ? from(t.childNodes) : [];\nconst parent = t => t && t.parentElement;\nconst closest = (t, n) => isElement(t) && t.closest(n);\nconst getFocusedElement = t => (t || document).activeElement;\nconst liesBetween = (t, n, o) => {\n  const s = closest(t, n);\n  const e = t && findFirst(o, s);\n  const c = closest(e, n) === s;\n  return s && e ? s === t || e === t || c && closest(closest(t, o), n) !== s : false;\n};\nconst removeElements = t => {\n  each(createOrKeepArray(t), t => {\n    const n = parent(t);\n    t && n && n.removeChild(t);\n  });\n};\nconst appendChildren = (t, n) => bind(removeElements, t && n && each(createOrKeepArray(n), n => {\n  n && t.appendChild(n);\n}));\nconst createDiv = t => {\n  const n = document.createElement(\"div\");\n  setAttrs(n, \"class\", t);\n  return n;\n};\nconst createDOM = t => {\n  const n = createDiv();\n  n.innerHTML = t.trim();\n  return each(contents(n), t => removeElements(t));\n};\nconst getCSSVal = (t, n) => t.getPropertyValue(n) || t[n] || \"\";\nconst validFiniteNumber = t => {\n  const n = t || 0;\n  return isFinite(n) ? n : 0;\n};\nconst parseToZeroOrNumber = t => validFiniteNumber(parseFloat(t || \"\"));\nconst roundCssNumber = t => Math.round(t * 1e4) / 1e4;\nconst numberToCssPx = t => `${roundCssNumber(validFiniteNumber(t))}px`;\nfunction setStyles(t, n) {\n  t && n && each(n, (n, o) => {\n    try {\n      const s = t.style;\n      const e = isNull(n) || isBoolean(n) ? \"\" : isNumber(n) ? numberToCssPx(n) : n;\n      if (o.indexOf(\"--\") === 0) {\n        s.setProperty(o, e);\n      } else {\n        s[o] = e;\n      }\n    } catch (s) {}\n  });\n}\nfunction getStyles(t, o, s) {\n  const e = isString(o);\n  let c = e ? \"\" : {};\n  if (t) {\n    const r = n.getComputedStyle(t, s) || t.style;\n    c = e ? getCSSVal(r, o) : from(o).reduce((t, n) => {\n      t[n] = getCSSVal(r, n);\n      return t;\n    }, c);\n  }\n  return c;\n}\nconst topRightBottomLeft = (t, n, o) => {\n  const s = n ? `${n}-` : \"\";\n  const e = o ? `-${o}` : \"\";\n  const c = `${s}top${e}`;\n  const r = `${s}right${e}`;\n  const l = `${s}bottom${e}`;\n  const i = `${s}left${e}`;\n  const a = getStyles(t, [c, r, l, i]);\n  return {\n    t: parseToZeroOrNumber(a[c]),\n    r: parseToZeroOrNumber(a[r]),\n    b: parseToZeroOrNumber(a[l]),\n    l: parseToZeroOrNumber(a[i])\n  };\n};\nconst getTrasformTranslateValue = (t, n) => `translate${isObject(t) ? `(${t.x},${t.y})` : `${n ? \"X\" : \"Y\"}(${t})`}`;\nconst elementHasDimensions = t => !!(t.offsetWidth || t.offsetHeight || t.getClientRects().length);\nconst z = {\n  w: 0,\n  h: 0\n};\nconst getElmWidthHeightProperty = (t, n) => n ? {\n  w: n[`${t}Width`],\n  h: n[`${t}Height`]\n} : z;\nconst getWindowSize = t => getElmWidthHeightProperty(\"inner\", t || n);\nconst I = bind(getElmWidthHeightProperty, \"offset\");\nconst A = bind(getElmWidthHeightProperty, \"client\");\nconst D = bind(getElmWidthHeightProperty, \"scroll\");\nconst getFractionalSize = t => {\n  const n = parseFloat(getStyles(t, $)) || 0;\n  const o = parseFloat(getStyles(t, C)) || 0;\n  return {\n    w: n - e(n),\n    h: o - e(o)\n  };\n};\nconst getBoundingClientRect = t => t.getBoundingClientRect();\nconst hasDimensions = t => !!t && elementHasDimensions(t);\nconst domRectHasDimensions = t => !!(t && (t[C] || t[$]));\nconst domRectAppeared = (t, n) => {\n  const o = domRectHasDimensions(t);\n  const s = domRectHasDimensions(n);\n  return !s && o;\n};\nconst removeEventListener = (t, n, o, s) => {\n  each(getDomTokensArray(n), n => {\n    t && t.removeEventListener(n, o, s);\n  });\n};\nconst addEventListener = (t, n, o, s) => {\n  var e;\n  const c = (e = s && s.H) != null ? e : true;\n  const r = s && s.I || false;\n  const l = s && s.A || false;\n  const i = {\n    passive: c,\n    capture: r\n  };\n  return bind(runEachAndClear, getDomTokensArray(n).map(n => {\n    const s = l ? e => {\n      removeEventListener(t, n, s, r);\n      o && o(e);\n    } : o;\n    t && t.addEventListener(n, s, i);\n    return bind(removeEventListener, t, n, s, r);\n  }));\n};\nconst stopPropagation = t => t.stopPropagation();\nconst preventDefault = t => t.preventDefault();\nconst stopAndPrevent = t => stopPropagation(t) || preventDefault(t);\nconst scrollElementTo = (t, n) => {\n  const {\n    x: o,\n    y: s\n  } = isNumber(n) ? {\n    x: n,\n    y: n\n  } : n || {};\n  isNumber(o) && (t.scrollLeft = o);\n  isNumber(s) && (t.scrollTop = s);\n};\nconst getElementScroll = t => ({\n  x: t.scrollLeft,\n  y: t.scrollTop\n});\nconst getZeroScrollCoordinates = () => ({\n  D: {\n    x: 0,\n    y: 0\n  },\n  M: {\n    x: 0,\n    y: 0\n  }\n});\nconst sanitizeScrollCoordinates = (t, n) => {\n  const {\n    D: o,\n    M: s\n  } = t;\n  const {\n    w: e,\n    h: l\n  } = n;\n  const sanitizeAxis = (t, n, o) => {\n    let s = r(t) * o;\n    let e = r(n) * o;\n    if (s === e) {\n      const o = c(t);\n      const r = c(n);\n      e = o > r ? 0 : e;\n      s = o < r ? 0 : s;\n    }\n    s = s === e ? 0 : s;\n    return [s + 0, e + 0];\n  };\n  const [i, a] = sanitizeAxis(o.x, s.x, e);\n  const [u, _] = sanitizeAxis(o.y, s.y, l);\n  return {\n    D: {\n      x: i,\n      y: u\n    },\n    M: {\n      x: a,\n      y: _\n    }\n  };\n};\nconst isDefaultDirectionScrollCoordinates = ({\n  D: t,\n  M: n\n}) => {\n  const getAxis = (t, n) => t === 0 && t <= n;\n  return {\n    x: getAxis(t.x, n.x),\n    y: getAxis(t.y, n.y)\n  };\n};\nconst getScrollCoordinatesPercent = ({\n  D: t,\n  M: n\n}, o) => {\n  const getAxis = (t, n, o) => capNumber(0, 1, (t - o) / (t - n) || 0);\n  return {\n    x: getAxis(t.x, n.x, o.x),\n    y: getAxis(t.y, n.y, o.y)\n  };\n};\nconst focusElement = t => {\n  if (t && t.focus) {\n    t.focus({\n      preventScroll: true\n    });\n  }\n};\nconst manageListener = (t, n) => {\n  each(createOrKeepArray(n), t);\n};\nconst createEventListenerHub = t => {\n  const n = new Map();\n  const removeEvent = (t, o) => {\n    if (t) {\n      const s = n.get(t);\n      manageListener(t => {\n        if (s) {\n          s[t ? \"delete\" : \"clear\"](t);\n        }\n      }, o);\n    } else {\n      n.forEach(t => {\n        t.clear();\n      });\n      n.clear();\n    }\n  };\n  const addEvent = (t, o) => {\n    if (isString(t)) {\n      const s = n.get(t) || new Set();\n      n.set(t, s);\n      manageListener(t => {\n        isFunction(t) && s.add(t);\n      }, o);\n      return bind(removeEvent, t, o);\n    }\n    if (isBoolean(o) && o) {\n      removeEvent();\n    }\n    const s = keys(t);\n    const e = [];\n    each(s, n => {\n      const o = t[n];\n      o && push(e, addEvent(n, o));\n    });\n    return bind(runEachAndClear, e);\n  };\n  const triggerEvent = (t, o) => {\n    each(from(n.get(t)), t => {\n      if (o && !isEmptyArray(o)) {\n        t.apply(0, o);\n      } else {\n        t();\n      }\n    });\n  };\n  addEvent(t || {});\n  return [addEvent, removeEvent, triggerEvent];\n};\nconst opsStringify = t => JSON.stringify(t, (t, n) => {\n  if (isFunction(n)) {\n    throw 0;\n  }\n  return n;\n});\nconst getPropByPath = (t, n) => t ? `${n}`.split(\".\").reduce((t, n) => t && hasOwnProperty(t, n) ? t[n] : void 0, t) : void 0;\nconst M = {\n  paddingAbsolute: false,\n  showNativeOverlaidScrollbars: false,\n  update: {\n    elementEvents: [[\"img\", \"load\"]],\n    debounce: [0, 33],\n    attributes: null,\n    ignoreMutation: null\n  },\n  overflow: {\n    x: \"scroll\",\n    y: \"scroll\"\n  },\n  scrollbars: {\n    theme: \"os-theme-dark\",\n    visibility: \"auto\",\n    autoHide: \"never\",\n    autoHideDelay: 1300,\n    autoHideSuspend: false,\n    dragScroll: true,\n    clickScroll: false,\n    pointers: [\"mouse\", \"touch\", \"pen\"]\n  }\n};\nconst getOptionsDiff = (t, n) => {\n  const o = {};\n  const s = concat(keys(n), keys(t));\n  each(s, s => {\n    const e = t[s];\n    const c = n[s];\n    if (isObject(e) && isObject(c)) {\n      assignDeep(o[s] = {}, getOptionsDiff(e, c));\n      if (isEmptyObject(o[s])) {\n        delete o[s];\n      }\n    } else if (hasOwnProperty(n, s) && c !== e) {\n      let t = true;\n      if (isArray(e) || isArray(c)) {\n        try {\n          if (opsStringify(e) === opsStringify(c)) {\n            t = false;\n          }\n        } catch (r) {}\n      }\n      if (t) {\n        o[s] = c;\n      }\n    }\n  });\n  return o;\n};\nconst createOptionCheck = (t, n, o) => s => [getPropByPath(t, s), o || getPropByPath(n, s) !== void 0];\nconst T = `data-overlayscrollbars`;\nconst k = \"os-environment\";\nconst R = `${k}-scrollbar-hidden`;\nconst V = `${T}-initialize`;\nconst L = \"noClipping\";\nconst U = `${T}-body`;\nconst P = T;\nconst N = \"host\";\nconst q = `${T}-viewport`;\nconst B = m;\nconst F = O;\nconst j = \"arrange\";\nconst X = \"measuring\";\nconst Y = \"scrolling\";\nconst W = \"scrollbarHidden\";\nconst J = \"noContent\";\nconst G = `${T}-padding`;\nconst K = `${T}-content`;\nconst Q = \"os-size-observer\";\nconst Z = `${Q}-appear`;\nconst tt = `${Q}-listener`;\nconst nt = `${tt}-scroll`;\nconst ot = `${tt}-item`;\nconst st = `${ot}-final`;\nconst et = \"os-trinsic-observer\";\nconst ct = \"os-theme-none\";\nconst rt = \"os-scrollbar\";\nconst lt = `${rt}-rtl`;\nconst it = `${rt}-horizontal`;\nconst at = `${rt}-vertical`;\nconst ut = `${rt}-track`;\nconst _t = `${rt}-handle`;\nconst dt = `${rt}-visible`;\nconst ft = `${rt}-cornerless`;\nconst vt = `${rt}-interaction`;\nconst pt = `${rt}-unusable`;\nconst ht = `${rt}-auto-hide`;\nconst gt = `${ht}-hidden`;\nconst bt = `${rt}-wheel`;\nconst wt = `${ut}-interactive`;\nconst yt = `${_t}-interactive`;\nlet St;\nconst getNonce = () => St;\nconst setNonce = t => {\n  St = t;\n};\nlet mt;\nconst createEnvironment = () => {\n  const getNativeScrollbarSize = (t, n, o) => {\n    appendChildren(document.body, t);\n    appendChildren(document.body, t);\n    const s = A(t);\n    const e = I(t);\n    const c = getFractionalSize(n);\n    o && removeElements(t);\n    return {\n      x: e.h - s.h + c.h,\n      y: e.w - s.w + c.w\n    };\n  };\n  const getNativeScrollbarsHiding = t => {\n    let n = false;\n    const o = addClass(t, R);\n    try {\n      n = getStyles(t, \"scrollbar-width\") === \"none\" || getStyles(t, \"display\", \"::-webkit-scrollbar\") === \"none\";\n    } catch (s) {}\n    o();\n    return n;\n  };\n  const t = `.${k}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${k} div{width:200%;height:200%;margin:10px 0}.${R}{scrollbar-width:none!important}.${R}::-webkit-scrollbar,.${R}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\n  const o = createDOM(`<div class=\"${k}\"><div></div><style>${t}</style></div>`);\n  const s = o[0];\n  const e = s.firstChild;\n  const c = s.lastChild;\n  const r = getNonce();\n  if (r) {\n    c.nonce = r;\n  }\n  const [l,, i] = createEventListenerHub();\n  const [a, u] = createCache({\n    o: getNativeScrollbarSize(s, e),\n    i: equalXY\n  }, bind(getNativeScrollbarSize, s, e, true));\n  const [_] = u();\n  const d = getNativeScrollbarsHiding(s);\n  const f = {\n    x: _.x === 0,\n    y: _.y === 0\n  };\n  const p = {\n    elements: {\n      host: null,\n      padding: !d,\n      viewport: t => d && isBodyElement(t) && t,\n      content: false\n    },\n    scrollbars: {\n      slot: true\n    },\n    cancel: {\n      nativeScrollbarsOverlaid: false,\n      body: null\n    }\n  };\n  const h = assignDeep({}, M);\n  const g = bind(assignDeep, {}, h);\n  const b = bind(assignDeep, {}, p);\n  const w = {\n    T: _,\n    k: f,\n    R: d,\n    V: !!v,\n    L: bind(l, \"r\"),\n    U: b,\n    P: t => assignDeep(p, t) && b(),\n    N: g,\n    q: t => assignDeep(h, t) && g(),\n    B: assignDeep({}, p),\n    F: assignDeep({}, h)\n  };\n  removeAttrs(s, \"style\");\n  removeElements(s);\n  addEventListener(n, \"resize\", () => {\n    i(\"r\", []);\n  });\n  if (isFunction(n.matchMedia) && !d && (!f.x || !f.y)) {\n    const addZoomListener = t => {\n      const o = n.matchMedia(`(resolution: ${n.devicePixelRatio}dppx)`);\n      addEventListener(o, \"change\", () => {\n        t();\n        addZoomListener(t);\n      }, {\n        A: true\n      });\n    };\n    addZoomListener(() => {\n      const [t, n] = a();\n      assignDeep(w.T, t);\n      i(\"r\", [n]);\n    });\n  }\n  return w;\n};\nconst getEnvironment = () => {\n  if (!mt) {\n    mt = createEnvironment();\n  }\n  return mt;\n};\nconst resolveInitialization = (t, n) => isFunction(n) ? n.apply(0, t) : n;\nconst staticInitializationElement = (t, n, o, s) => {\n  const e = isUndefined(s) ? o : s;\n  const c = resolveInitialization(t, e);\n  return c || n.apply(0, t);\n};\nconst dynamicInitializationElement = (t, n, o, s) => {\n  const e = isUndefined(s) ? o : s;\n  const c = resolveInitialization(t, e);\n  return !!c && (isHTMLElement(c) ? c : n.apply(0, t));\n};\nconst cancelInitialization = (t, n) => {\n  const {\n    nativeScrollbarsOverlaid: o,\n    body: s\n  } = n || {};\n  const {\n    k: e,\n    R: c,\n    U: r\n  } = getEnvironment();\n  const {\n    nativeScrollbarsOverlaid: l,\n    body: i\n  } = r().cancel;\n  const a = o != null ? o : l;\n  const u = isUndefined(s) ? i : s;\n  const _ = (e.x || e.y) && a;\n  const d = t && (isNull(u) ? !c : u);\n  return !!_ || !!d;\n};\nconst Ot = new WeakMap();\nconst addInstance = (t, n) => {\n  Ot.set(t, n);\n};\nconst removeInstance = t => {\n  Ot.delete(t);\n};\nconst getInstance = t => Ot.get(t);\nconst createEventContentChange = (t, n, o) => {\n  let s = false;\n  const e = o ? new WeakMap() : false;\n  const destroy = () => {\n    s = true;\n  };\n  const updateElements = c => {\n    if (e && o) {\n      const r = o.map(n => {\n        const [o, s] = n || [];\n        const e = s && o ? (c || find)(o, t) : [];\n        return [e, s];\n      });\n      each(r, o => each(o[0], c => {\n        const r = o[1];\n        const l = e.get(c) || [];\n        const i = t.contains(c);\n        if (i && r) {\n          const t = addEventListener(c, r, o => {\n            if (s) {\n              t();\n              e.delete(c);\n            } else {\n              n(o);\n            }\n          });\n          e.set(c, push(l, t));\n        } else {\n          runEachAndClear(l);\n          e.delete(c);\n        }\n      }));\n    }\n  };\n  updateElements();\n  return [destroy, updateElements];\n};\nconst createDOMObserver = (t, n, o, s) => {\n  let e = false;\n  const {\n    j: c,\n    X: r,\n    Y: l,\n    W: i,\n    J: a,\n    G: u\n  } = s || {};\n  const d = debounce(() => e && o(true), {\n    _: 33,\n    v: 99\n  });\n  const [f, v] = createEventContentChange(t, d, l);\n  const p = c || [];\n  const h = r || [];\n  const g = concat(p, h);\n  const observerCallback = (e, c) => {\n    if (!isEmptyArray(c)) {\n      const r = a || noop;\n      const l = u || noop;\n      const _ = [];\n      const d = [];\n      let f = false;\n      let p = false;\n      each(c, o => {\n        const {\n          attributeName: e,\n          target: c,\n          type: a,\n          oldValue: u,\n          addedNodes: v,\n          removedNodes: g\n        } = o;\n        const b = a === \"attributes\";\n        const w = a === \"childList\";\n        const y = t === c;\n        const S = b && e;\n        const m = S && getAttr(c, e || \"\");\n        const O = isString(m) ? m : null;\n        const $ = S && u !== O;\n        const C = inArray(h, e) && $;\n        if (n && (w || !y)) {\n          const n = b && $;\n          const a = n && i && is(c, i);\n          const d = a ? !r(c, e, u, O) : !b || n;\n          const f = d && !l(o, !!a, t, s);\n          each(v, t => push(_, t));\n          each(g, t => push(_, t));\n          p = p || f;\n        }\n        if (!n && y && $ && !r(c, e, u, O)) {\n          push(d, e);\n          f = f || C;\n        }\n      });\n      v(t => deduplicateArray(_).reduce((n, o) => {\n        push(n, find(t, o));\n        return is(o, t) ? push(n, o) : n;\n      }, []));\n      if (n) {\n        !e && p && o(false);\n        return [false];\n      }\n      if (!isEmptyArray(d) || f) {\n        const t = [deduplicateArray(d), f];\n        !e && o.apply(0, t);\n        return t;\n      }\n    }\n  };\n  const b = new _(bind(observerCallback, false));\n  return [() => {\n    b.observe(t, {\n      attributes: true,\n      attributeOldValue: true,\n      attributeFilter: g,\n      subtree: n,\n      childList: n,\n      characterData: n\n    });\n    e = true;\n    return () => {\n      if (e) {\n        f();\n        b.disconnect();\n        e = false;\n      }\n    };\n  }, () => {\n    if (e) {\n      d.m();\n      return observerCallback(true, b.takeRecords());\n    }\n  }];\n};\nconst $t = {};\nconst Ct = {};\nconst addPlugins = t => {\n  each(t, t => each(t, (n, o) => {\n    $t[o] = t[o];\n  }));\n};\nconst registerPluginModuleInstances = (t, n, o) => keys(t).map(s => {\n  const {\n    static: e,\n    instance: c\n  } = t[s];\n  const [r, l, i] = o || [];\n  const a = o ? c : e;\n  if (a) {\n    const t = o ? a(r, l, n) : a(n);\n    return (i || Ct)[s] = t;\n  }\n});\nconst getStaticPluginModuleInstance = t => Ct[t];\nconst xt = \"__osOptionsValidationPlugin\";\nconst Ht = \"__osSizeObserverPlugin\";\nconst Et = /* @__PURE__ */(() => ({\n  [Ht]: {\n    static: () => (t, n, o) => {\n      const s = 3333333;\n      const e = \"scroll\";\n      const c = createDOM(`<div class=\"${ot}\" dir=\"ltr\"><div class=\"${ot}\"><div class=\"${st}\"></div></div><div class=\"${ot}\"><div class=\"${st}\" style=\"width: 200%; height: 200%\"></div></div></div>`);\n      const r = c[0];\n      const a = r.lastChild;\n      const u = r.firstChild;\n      const _ = u == null ? void 0 : u.firstChild;\n      let d = I(r);\n      let f = d;\n      let v = false;\n      let p;\n      const reset = () => {\n        scrollElementTo(u, s);\n        scrollElementTo(a, s);\n      };\n      const onResized = t => {\n        p = 0;\n        if (v) {\n          d = f;\n          n(t === true);\n        }\n      };\n      const onScroll = t => {\n        f = I(r);\n        v = !t || !equalWH(f, d);\n        if (t) {\n          stopPropagation(t);\n          if (v && !p) {\n            l(p);\n            p = i(onResized);\n          }\n        } else {\n          onResized(t === false);\n        }\n        reset();\n      };\n      const h = [appendChildren(t, c), addEventListener(u, e, onScroll), addEventListener(a, e, onScroll)];\n      addClass(t, nt);\n      setStyles(_, {\n        [$]: s,\n        [C]: s\n      });\n      i(reset);\n      return [o ? bind(onScroll, false) : reset, h];\n    }\n  }\n}))();\nconst getShowNativeOverlaidScrollbars = (t, n) => {\n  const {\n    k: o\n  } = n;\n  const [s, e] = t(\"showNativeOverlaidScrollbars\");\n  return [s && o.x && o.y, e];\n};\nconst overflowIsVisible = t => t.indexOf(x) === 0;\nconst createViewportOverflowState = (t, n) => {\n  const getAxisOverflowStyle = (t, n, o, s) => {\n    const e = t === x ? H : t.replace(`${x}-`, \"\");\n    const c = overflowIsVisible(t);\n    const r = overflowIsVisible(o);\n    if (!n && !s) {\n      return H;\n    }\n    if (c && r) {\n      return x;\n    }\n    if (c) {\n      const t = n ? x : H;\n      return n && s ? e : t;\n    }\n    const l = r && s ? x : H;\n    return n ? e : l;\n  };\n  const o = {\n    x: getAxisOverflowStyle(n.x, t.x, n.y, t.y),\n    y: getAxisOverflowStyle(n.y, t.y, n.x, t.x)\n  };\n  return {\n    K: o,\n    Z: {\n      x: o.x === E,\n      y: o.y === E\n    }\n  };\n};\nconst zt = \"__osScrollbarsHidingPlugin\";\nconst It = /* @__PURE__ */(() => ({\n  [zt]: {\n    static: () => ({\n      tt: (t, n, o, s, e) => {\n        const {\n          nt: c,\n          ot: r\n        } = t;\n        const {\n          R: l,\n          k: i,\n          T: a\n        } = s;\n        const u = !c && !l && (i.x || i.y);\n        const [_] = getShowNativeOverlaidScrollbars(e, s);\n        const readViewportOverflowState = () => {\n          const getStatePerAxis = t => {\n            const n = getStyles(r, t);\n            const o = n === E;\n            return [n, o];\n          };\n          const [t, n] = getStatePerAxis(m);\n          const [o, s] = getStatePerAxis(O);\n          return {\n            K: {\n              x: t,\n              y: o\n            },\n            Z: {\n              x: n,\n              y: s\n            }\n          };\n        };\n        const _getViewportOverflowHideOffset = t => {\n          const {\n            Z: n\n          } = t;\n          const o = l || _ ? 0 : 42;\n          const getHideOffsetPerAxis = (t, n, s) => {\n            const e = t ? o : s;\n            const c = n && !l ? e : 0;\n            const r = t && !!o;\n            return [c, r];\n          };\n          const [s, e] = getHideOffsetPerAxis(i.x, n.x, a.x);\n          const [c, r] = getHideOffsetPerAxis(i.y, n.y, a.y);\n          return {\n            st: {\n              x: s,\n              y: c\n            },\n            et: {\n              x: e,\n              y: r\n            }\n          };\n        };\n        const _hideNativeScrollbars = (t, {\n          ct: o\n        }, s) => {\n          if (!c) {\n            const e = assignDeep({}, {\n              [y]: 0,\n              [S]: 0,\n              [w]: 0\n            });\n            const {\n              st: c,\n              et: r\n            } = _getViewportOverflowHideOffset(t);\n            const {\n              x: l,\n              y: i\n            } = r;\n            const {\n              x: a,\n              y: u\n            } = c;\n            const {\n              rt: _\n            } = n;\n            const d = o ? w : y;\n            const f = o ? g : h;\n            const v = _[d];\n            const p = _[S];\n            const m = _[f];\n            const O = _[b];\n            e[$] = `calc(100% + ${u + v * -1}px)`;\n            e[d] = -u + v;\n            e[S] = -a + p;\n            if (s) {\n              e[f] = m + (i ? u : 0);\n              e[b] = O + (l ? a : 0);\n            }\n            return e;\n          }\n        };\n        const _arrangeViewport = (t, s, e) => {\n          if (u) {\n            const {\n              rt: c\n            } = n;\n            const {\n              st: l,\n              et: i\n            } = _getViewportOverflowHideOffset(t);\n            const {\n              x: a,\n              y: u\n            } = i;\n            const {\n              x: _,\n              y: d\n            } = l;\n            const {\n              ct: f\n            } = o;\n            const v = f ? h : g;\n            const p = c[v];\n            const b = c.paddingTop;\n            const w = s.w + e.w;\n            const y = s.h + e.h;\n            const S = {\n              w: d && u ? `${d + w - p}px` : \"\",\n              h: _ && a ? `${_ + y - b}px` : \"\"\n            };\n            setStyles(r, {\n              \"--os-vaw\": S.w,\n              \"--os-vah\": S.h\n            });\n          }\n          return u;\n        };\n        const _undoViewportArrange = t => {\n          if (u) {\n            const s = t || readViewportOverflowState();\n            const {\n              rt: e\n            } = n;\n            const {\n              et: c\n            } = _getViewportOverflowHideOffset(s);\n            const {\n              x: l,\n              y: i\n            } = c;\n            const a = {};\n            const assignProps = t => each(t, t => {\n              a[t] = e[t];\n            });\n            if (l) {\n              assignProps([S, p, b]);\n            }\n            if (i) {\n              assignProps([w, y, g, h]);\n            }\n            const _ = getStyles(r, keys(a));\n            const d = removeAttrClass(r, q, j);\n            setStyles(r, a);\n            return [() => {\n              setStyles(r, assignDeep({}, _, _hideNativeScrollbars(s, o, u)));\n              d();\n            }, s];\n          }\n          return [noop];\n        };\n        return {\n          lt: _getViewportOverflowHideOffset,\n          it: _arrangeViewport,\n          ut: _undoViewportArrange,\n          _t: _hideNativeScrollbars\n        };\n      }\n    })\n  }\n}))();\nconst At = \"__osClickScrollPlugin\";\nconst Dt = /* @__PURE__ */(() => ({\n  [At]: {\n    static: () => (t, n, o, s) => {\n      let e = false;\n      let c = noop;\n      const r = 133;\n      const l = 222;\n      const [i, a] = selfClearTimeout(r);\n      const u = Math.sign(n);\n      const _ = o * u;\n      const d = _ / 2;\n      const easing = t => 1 - (1 - t) * (1 - t);\n      const easedEndPressAnimation = (n, o) => animateNumber(n, o, l, t, easing);\n      const linearPressAnimation = (o, s) => animateNumber(o, n - _, r * s, (o, s, e) => {\n        t(o);\n        if (e) {\n          c = easedEndPressAnimation(o, n);\n        }\n      });\n      const f = animateNumber(0, _, l, (r, l, a) => {\n        t(r);\n        if (a) {\n          s(e);\n          if (!e) {\n            const t = n - r;\n            const s = Math.sign(t - d) === u;\n            s && i(() => {\n              const s = t - _;\n              const e = Math.sign(s) === u;\n              c = e ? linearPressAnimation(r, Math.abs(s) / o) : easedEndPressAnimation(r, n);\n            });\n          }\n        }\n      }, easing);\n      return t => {\n        e = true;\n        if (t) {\n          f();\n        }\n        a();\n        c();\n      };\n    }\n  }\n}))();\nconst createSizeObserver = (t, n, o) => {\n  const {\n    dt: s\n  } = o || {};\n  const e = getStaticPluginModuleInstance(Ht);\n  const [c] = createCache({\n    o: false,\n    u: true\n  });\n  return () => {\n    const o = [];\n    const r = createDOM(`<div class=\"${Q}\"><div class=\"${tt}\"></div></div>`);\n    const l = r[0];\n    const i = l.firstChild;\n    const onSizeChangedCallbackProxy = t => {\n      const o = t instanceof ResizeObserverEntry;\n      let s = false;\n      let e = false;\n      if (o) {\n        const [n,, o] = c(t.contentRect);\n        const r = domRectHasDimensions(n);\n        e = domRectAppeared(n, o);\n        s = !e && !r;\n      } else {\n        e = t === true;\n      }\n      if (!s) {\n        n({\n          ft: true,\n          dt: e\n        });\n      }\n    };\n    if (f) {\n      const t = new f(t => onSizeChangedCallbackProxy(t.pop()));\n      t.observe(i);\n      push(o, () => {\n        t.disconnect();\n      });\n    } else if (e) {\n      const [t, n] = e(i, onSizeChangedCallbackProxy, s);\n      push(o, concat([addClass(l, Z), addEventListener(l, \"animationstart\", t)], n));\n    } else {\n      return noop;\n    }\n    return bind(runEachAndClear, push(o, appendChildren(t, l)));\n  };\n};\nconst createTrinsicObserver = (t, n) => {\n  let o;\n  const isHeightIntrinsic = t => t.h === 0 || t.isIntersecting || t.intersectionRatio > 0;\n  const s = createDiv(et);\n  const [e] = createCache({\n    o: false\n  });\n  const triggerOnTrinsicChangedCallback = (t, o) => {\n    if (t) {\n      const s = e(isHeightIntrinsic(t));\n      const [, c] = s;\n      return c && !o && n(s) && [s];\n    }\n  };\n  const intersectionObserverCallback = (t, n) => triggerOnTrinsicChangedCallback(n.pop(), t);\n  return [() => {\n    const n = [];\n    if (d) {\n      o = new d(bind(intersectionObserverCallback, false), {\n        root: t\n      });\n      o.observe(s);\n      push(n, () => {\n        o.disconnect();\n      });\n    } else {\n      const onSizeChanged = () => {\n        const t = I(s);\n        triggerOnTrinsicChangedCallback(t);\n      };\n      push(n, createSizeObserver(s, onSizeChanged)());\n      onSizeChanged();\n    }\n    return bind(runEachAndClear, push(n, appendChildren(t, s)));\n  }, () => o && intersectionObserverCallback(true, o.takeRecords())];\n};\nconst createObserversSetup = (t, n, o, s) => {\n  let e;\n  let c;\n  let r;\n  let l;\n  let i;\n  let a;\n  const u = `[${P}]`;\n  const _ = `[${q}]`;\n  const d = [\"id\", \"class\", \"style\", \"open\", \"wrap\", \"cols\", \"rows\"];\n  const {\n    vt: v,\n    ht: p,\n    ot: h,\n    gt: g,\n    bt: b,\n    nt: w,\n    wt: y,\n    yt: S,\n    St: m,\n    Ot: O\n  } = t;\n  const getDirectionIsRTL = t => getStyles(t, \"direction\") === \"rtl\";\n  const $ = {\n    $t: false,\n    ct: getDirectionIsRTL(v)\n  };\n  const C = getEnvironment();\n  const x = getStaticPluginModuleInstance(zt);\n  const [H] = createCache({\n    i: equalWH,\n    o: {\n      w: 0,\n      h: 0\n    }\n  }, () => {\n    const s = x && x.tt(t, n, $, C, o).ut;\n    const e = y && w;\n    const c = !e && hasAttrClass(p, P, L);\n    const r = !w && S(j);\n    const l = r && getElementScroll(g);\n    const i = l && O();\n    const a = m(X, c);\n    const u = r && s && s()[0];\n    const _ = D(h);\n    const d = getFractionalSize(h);\n    u && u();\n    scrollElementTo(g, l);\n    i && i();\n    c && a();\n    return {\n      w: _.w + d.w,\n      h: _.h + d.h\n    };\n  });\n  const E = debounce(s, {\n    _: () => e,\n    v: () => c,\n    S(t, n) {\n      const [o] = t;\n      const [s] = n;\n      return [concat(keys(o), keys(s)).reduce((t, n) => {\n        t[n] = o[n] || s[n];\n        return t;\n      }, {})];\n    }\n  });\n  const setDirection = t => {\n    const n = getDirectionIsRTL(v);\n    assignDeep(t, {\n      Ct: a !== n\n    });\n    assignDeep($, {\n      ct: n\n    });\n    a = n;\n  };\n  const onTrinsicChanged = (t, n) => {\n    const [o, e] = t;\n    const c = {\n      xt: e\n    };\n    assignDeep($, {\n      $t: o\n    });\n    !n && s(c);\n    return c;\n  };\n  const onSizeChanged = ({\n    ft: t,\n    dt: n\n  }) => {\n    const o = t && !n;\n    const e = !o && C.R ? E : s;\n    const c = {\n      ft: t || n,\n      dt: n\n    };\n    setDirection(c);\n    e(c);\n  };\n  const onContentMutation = (t, n) => {\n    const [, o] = H();\n    const e = {\n      Ht: o\n    };\n    setDirection(e);\n    const c = t ? s : E;\n    o && !n && c(e);\n    return e;\n  };\n  const onHostMutation = (t, n, o) => {\n    const s = {\n      Et: n\n    };\n    setDirection(s);\n    if (n && !o) {\n      E(s);\n    }\n    return s;\n  };\n  const [z, I] = b ? createTrinsicObserver(p, onTrinsicChanged) : [];\n  const A = !w && createSizeObserver(p, onSizeChanged, {\n    dt: true\n  });\n  const [M, T] = createDOMObserver(p, false, onHostMutation, {\n    X: d,\n    j: d\n  });\n  const k = w && f && new f(t => {\n    const n = t[t.length - 1].contentRect;\n    onSizeChanged({\n      ft: true,\n      dt: domRectAppeared(n, i)\n    });\n    i = n;\n  });\n  const R = debounce(() => {\n    const [, t] = H();\n    s({\n      Ht: t\n    });\n  }, {\n    _: 222,\n    p: true\n  });\n  return [() => {\n    k && k.observe(p);\n    const t = A && A();\n    const n = z && z();\n    const o = M();\n    const s = C.L(t => {\n      if (t) {\n        E({\n          zt: t\n        });\n      } else {\n        R();\n      }\n    });\n    return () => {\n      k && k.disconnect();\n      t && t();\n      n && n();\n      l && l();\n      o();\n      s();\n    };\n  }, ({\n    It: t,\n    At: n,\n    Dt: o\n  }) => {\n    const s = {};\n    const [i] = t(\"update.ignoreMutation\");\n    const [a, f] = t(\"update.attributes\");\n    const [v, p] = t(\"update.elementEvents\");\n    const [g, y] = t(\"update.debounce\");\n    const S = p || f;\n    const m = n || o;\n    const ignoreMutationFromOptions = t => isFunction(i) && i(t);\n    if (S) {\n      r && r();\n      l && l();\n      const [t, n] = createDOMObserver(b || h, true, onContentMutation, {\n        j: concat(d, a || []),\n        Y: v,\n        W: u,\n        G: (t, n) => {\n          const {\n            target: o,\n            attributeName: s\n          } = t;\n          const e = !n && s && !w ? liesBetween(o, u, _) : false;\n          return e || !!closest(o, `.${rt}`) || !!ignoreMutationFromOptions(t);\n        }\n      });\n      l = t();\n      r = n;\n    }\n    if (y) {\n      E.m();\n      if (isArray(g)) {\n        const t = g[0];\n        const n = g[1];\n        e = isNumber(t) && t;\n        c = isNumber(n) && n;\n      } else if (isNumber(g)) {\n        e = g;\n        c = false;\n      } else {\n        e = false;\n        c = false;\n      }\n    }\n    if (m) {\n      const t = T();\n      const n = I && I();\n      const o = r && r();\n      t && assignDeep(s, onHostMutation(t[0], t[1], m));\n      n && assignDeep(s, onTrinsicChanged(n[0], m));\n      o && assignDeep(s, onContentMutation(o[0], m));\n    }\n    setDirection(s);\n    return s;\n  }, $];\n};\nconst createScrollbarsSetupElements = (t, n, o, s) => {\n  const e = \"--os-viewport-percent\";\n  const c = \"--os-scroll-percent\";\n  const r = \"--os-scroll-direction\";\n  const {\n    U: l\n  } = getEnvironment();\n  const {\n    scrollbars: i\n  } = l();\n  const {\n    slot: a\n  } = i;\n  const {\n    vt: u,\n    ht: _,\n    ot: d,\n    Mt: f,\n    gt: p,\n    wt: h,\n    nt: g\n  } = n;\n  const {\n    scrollbars: b\n  } = f ? {} : t;\n  const {\n    slot: w\n  } = b || {};\n  const y = [];\n  const S = [];\n  const m = [];\n  const O = dynamicInitializationElement([u, _, d], () => g && h ? u : _, a, w);\n  const initScrollTimeline = t => {\n    if (v) {\n      const n = new v({\n        source: p,\n        axis: t\n      });\n      const _addScrollPercentAnimation = t => {\n        const o = t.Tt.animate({\n          clear: [\"left\"],\n          [c]: [0, 1]\n        }, {\n          timeline: n\n        });\n        return () => o.cancel();\n      };\n      return {\n        kt: _addScrollPercentAnimation\n      };\n    }\n  };\n  const $ = {\n    x: initScrollTimeline(\"x\"),\n    y: initScrollTimeline(\"y\")\n  };\n  const getViewportPercent = () => {\n    const {\n      Rt: t,\n      Vt: n\n    } = o;\n    const getAxisValue = (t, n) => capNumber(0, 1, t / (t + n) || 0);\n    return {\n      x: getAxisValue(n.x, t.x),\n      y: getAxisValue(n.y, t.y)\n    };\n  };\n  const scrollbarStructureAddRemoveClass = (t, n, o) => {\n    const s = o ? addClass : removeClass;\n    each(t, t => {\n      s(t.Tt, n);\n    });\n  };\n  const scrollbarStyle = (t, n) => {\n    each(t, t => {\n      const [o, s] = n(t);\n      setStyles(o, s);\n    });\n  };\n  const scrollbarsAddRemoveClass = (t, n, o) => {\n    const s = isBoolean(o);\n    const e = s ? o : true;\n    const c = s ? !o : true;\n    e && scrollbarStructureAddRemoveClass(S, t, n);\n    c && scrollbarStructureAddRemoveClass(m, t, n);\n  };\n  const refreshScrollbarsHandleLength = () => {\n    const t = getViewportPercent();\n    const createScrollbarStyleFn = t => n => [n.Tt, {\n      [e]: roundCssNumber(t) + \"\"\n    }];\n    scrollbarStyle(S, createScrollbarStyleFn(t.x));\n    scrollbarStyle(m, createScrollbarStyleFn(t.y));\n  };\n  const refreshScrollbarsHandleOffset = () => {\n    if (!v) {\n      const {\n        Lt: t\n      } = o;\n      const n = getScrollCoordinatesPercent(t, getElementScroll(p));\n      const createScrollbarStyleFn = t => n => [n.Tt, {\n        [c]: roundCssNumber(t) + \"\"\n      }];\n      scrollbarStyle(S, createScrollbarStyleFn(n.x));\n      scrollbarStyle(m, createScrollbarStyleFn(n.y));\n    }\n  };\n  const refreshScrollbarsScrollCoordinates = () => {\n    const {\n      Lt: t\n    } = o;\n    const n = isDefaultDirectionScrollCoordinates(t);\n    const createScrollbarStyleFn = t => n => [n.Tt, {\n      [r]: t ? \"0\" : \"1\"\n    }];\n    scrollbarStyle(S, createScrollbarStyleFn(n.x));\n    scrollbarStyle(m, createScrollbarStyleFn(n.y));\n  };\n  const refreshScrollbarsScrollbarOffset = () => {\n    if (g && !h) {\n      const {\n        Rt: t,\n        Lt: n\n      } = o;\n      const s = isDefaultDirectionScrollCoordinates(n);\n      const e = getScrollCoordinatesPercent(n, getElementScroll(p));\n      const styleScrollbarPosition = n => {\n        const {\n          Tt: o\n        } = n;\n        const c = parent(o) === d && o;\n        const getTranslateValue = (t, n, o) => {\n          const s = n * t;\n          return numberToCssPx(o ? s : -s);\n        };\n        return [c, c && {\n          transform: getTrasformTranslateValue({\n            x: getTranslateValue(e.x, t.x, s.x),\n            y: getTranslateValue(e.y, t.y, s.y)\n          })\n        }];\n      };\n      scrollbarStyle(S, styleScrollbarPosition);\n      scrollbarStyle(m, styleScrollbarPosition);\n    }\n  };\n  const generateScrollbarDOM = t => {\n    const n = t ? \"x\" : \"y\";\n    const o = t ? it : at;\n    const e = createDiv(`${rt} ${o}`);\n    const c = createDiv(ut);\n    const r = createDiv(_t);\n    const l = {\n      Tt: e,\n      Ut: c,\n      Pt: r\n    };\n    const i = $[n];\n    push(t ? S : m, l);\n    push(y, [appendChildren(e, c), appendChildren(c, r), bind(removeElements, e), i && i.kt(l), s(l, scrollbarsAddRemoveClass, t)]);\n    return l;\n  };\n  const C = bind(generateScrollbarDOM, true);\n  const x = bind(generateScrollbarDOM, false);\n  const appendElements = () => {\n    appendChildren(O, S[0].Tt);\n    appendChildren(O, m[0].Tt);\n    return bind(runEachAndClear, y);\n  };\n  C();\n  x();\n  return [{\n    Nt: refreshScrollbarsHandleLength,\n    qt: refreshScrollbarsHandleOffset,\n    Bt: refreshScrollbarsScrollCoordinates,\n    Ft: refreshScrollbarsScrollbarOffset,\n    jt: scrollbarsAddRemoveClass,\n    Xt: {\n      Yt: S,\n      Wt: C,\n      Jt: bind(scrollbarStyle, S)\n    },\n    Gt: {\n      Yt: m,\n      Wt: x,\n      Jt: bind(scrollbarStyle, m)\n    }\n  }, appendElements];\n};\nconst createScrollbarsSetupEvents = (t, n, o, s) => (r, l, i) => {\n  const {\n    ht: u,\n    ot: _,\n    nt: d,\n    gt: f,\n    Kt: v,\n    Ot: p\n  } = n;\n  const {\n    Tt: h,\n    Ut: g,\n    Pt: b\n  } = r;\n  const [w, y] = selfClearTimeout(333);\n  const [S, m] = selfClearTimeout(444);\n  const scrollOffsetElementScrollBy = t => {\n    isFunction(f.scrollBy) && f.scrollBy({\n      behavior: \"smooth\",\n      left: t.x,\n      top: t.y\n    });\n  };\n  const createInteractiveScrollEvents = () => {\n    const n = \"pointerup pointercancel lostpointercapture\";\n    const s = `client${i ? \"X\" : \"Y\"}`;\n    const r = i ? $ : C;\n    const l = i ? \"left\" : \"top\";\n    const a = i ? \"w\" : \"h\";\n    const u = i ? \"x\" : \"y\";\n    const createRelativeHandleMove = (t, n) => s => {\n      const {\n        Rt: e\n      } = o;\n      const c = I(g)[a] - I(b)[a];\n      const r = n * s / c;\n      const l = r * e[u];\n      scrollElementTo(f, {\n        [u]: t + l\n      });\n    };\n    const _ = [];\n    return addEventListener(g, \"pointerdown\", o => {\n      const i = closest(o.target, `.${_t}`) === b;\n      const d = i ? b : g;\n      const h = t.scrollbars;\n      const w = h[i ? \"dragScroll\" : \"clickScroll\"];\n      const {\n        button: y,\n        isPrimary: O,\n        pointerType: $\n      } = o;\n      const {\n        pointers: C\n      } = h;\n      const x = y === 0 && O && w && (C || []).includes($);\n      if (x) {\n        runEachAndClear(_);\n        m();\n        const t = !i && (o.shiftKey || w === \"instant\");\n        const h = bind(getBoundingClientRect, b);\n        const y = bind(getBoundingClientRect, g);\n        const getHandleOffset = (t, n) => (t || h())[l] - (n || y())[l];\n        const O = e(getBoundingClientRect(f)[r]) / I(f)[a] || 1;\n        const $ = createRelativeHandleMove(getElementScroll(f)[u], 1 / O);\n        const C = o[s];\n        const x = h();\n        const H = y();\n        const E = x[r];\n        const z = getHandleOffset(x, H) + E / 2;\n        const A = C - H[l];\n        const D = i ? 0 : A - z;\n        const releasePointerCapture = t => {\n          runEachAndClear(k);\n          d.releasePointerCapture(t.pointerId);\n        };\n        const M = i || t;\n        const T = p();\n        const k = [addEventListener(v, n, releasePointerCapture), addEventListener(v, \"selectstart\", t => preventDefault(t), {\n          H: false\n        }), addEventListener(g, n, releasePointerCapture), M && addEventListener(g, \"pointermove\", t => $(D + (t[s] - C))), M && (() => {\n          const t = getElementScroll(f);\n          T();\n          const n = getElementScroll(f);\n          const o = {\n            x: n.x - t.x,\n            y: n.y - t.y\n          };\n          if (c(o.x) > 3 || c(o.y) > 3) {\n            p();\n            scrollElementTo(f, t);\n            scrollOffsetElementScrollBy(o);\n            S(T);\n          }\n        })];\n        d.setPointerCapture(o.pointerId);\n        if (t) {\n          $(D);\n        } else if (!i) {\n          const t = getStaticPluginModuleInstance(At);\n          if (t) {\n            const n = t($, D, E, t => {\n              if (t) {\n                T();\n              } else {\n                push(k, T);\n              }\n            });\n            push(k, n);\n            push(_, bind(n, true));\n          }\n        }\n      }\n    });\n  };\n  let O = true;\n  return bind(runEachAndClear, [addEventListener(b, \"pointermove pointerleave\", s), addEventListener(h, \"pointerenter\", () => {\n    l(vt, true);\n  }), addEventListener(h, \"pointerleave pointercancel\", () => {\n    l(vt, false);\n  }), !d && addEventListener(h, \"mousedown\", () => {\n    const t = getFocusedElement();\n    if (hasAttr(t, q) || hasAttr(t, P) || t === document.body) {\n      a(bind(focusElement, _), 25);\n    }\n  }), addEventListener(h, \"wheel\", t => {\n    const {\n      deltaX: n,\n      deltaY: o,\n      deltaMode: s\n    } = t;\n    if (O && s === 0 && parent(h) === u) {\n      scrollOffsetElementScrollBy({\n        x: n,\n        y: o\n      });\n    }\n    O = false;\n    l(bt, true);\n    w(() => {\n      O = true;\n      l(bt);\n    });\n    preventDefault(t);\n  }, {\n    H: false,\n    I: true\n  }), addEventListener(h, \"pointerdown\", bind(addEventListener, v, \"click\", stopAndPrevent, {\n    A: true,\n    I: true,\n    H: false\n  }), {\n    I: true\n  }), createInteractiveScrollEvents(), y, m]);\n};\nconst createScrollbarsSetup = (t, n, o, s, e, c) => {\n  let r;\n  let l;\n  let i;\n  let a;\n  let u;\n  let _ = noop;\n  let d = 0;\n  const isHoverablePointerType = t => t.pointerType === \"mouse\";\n  const [f, v] = selfClearTimeout();\n  const [p, h] = selfClearTimeout(100);\n  const [g, b] = selfClearTimeout(100);\n  const [w, y] = selfClearTimeout(() => d);\n  const [S, m] = createScrollbarsSetupElements(t, e, s, createScrollbarsSetupEvents(n, e, s, t => isHoverablePointerType(t) && manageScrollbarsAutoHideInstantInteraction()));\n  const {\n    ht: O,\n    Qt: $,\n    wt: C\n  } = e;\n  const {\n    jt: H,\n    Nt: z,\n    qt: I,\n    Bt: A,\n    Ft: D\n  } = S;\n  const manageScrollbarsAutoHide = (t, n) => {\n    y();\n    if (t) {\n      H(gt);\n    } else {\n      const t = bind(H, gt, true);\n      if (d > 0 && !n) {\n        w(t);\n      } else {\n        t();\n      }\n    }\n  };\n  const manageScrollbarsAutoHideInstantInteraction = () => {\n    if (i ? !r : !a) {\n      manageScrollbarsAutoHide(true);\n      p(() => {\n        manageScrollbarsAutoHide(false);\n      });\n    }\n  };\n  const manageAutoHideSuspension = t => {\n    H(ht, t, true);\n    H(ht, t, false);\n  };\n  const onHostMouseEnter = t => {\n    if (isHoverablePointerType(t)) {\n      r = i;\n      i && manageScrollbarsAutoHide(true);\n    }\n  };\n  const M = [y, h, b, v, () => _(), addEventListener(O, \"pointerover\", onHostMouseEnter, {\n    A: true\n  }), addEventListener(O, \"pointerenter\", onHostMouseEnter), addEventListener(O, \"pointerleave\", t => {\n    if (isHoverablePointerType(t)) {\n      r = false;\n      i && manageScrollbarsAutoHide(false);\n    }\n  }), addEventListener(O, \"pointermove\", t => {\n    isHoverablePointerType(t) && l && manageScrollbarsAutoHideInstantInteraction();\n  }), addEventListener($, \"scroll\", t => {\n    f(() => {\n      I();\n      manageScrollbarsAutoHideInstantInteraction();\n    });\n    c(t);\n    D();\n  })];\n  return [() => bind(runEachAndClear, push(M, m())), ({\n    It: t,\n    Dt: n,\n    Zt: e,\n    tn: c\n  }) => {\n    const {\n      nn: r,\n      sn: f,\n      en: v,\n      cn: p\n    } = c || {};\n    const {\n      Ct: h,\n      dt: b\n    } = e || {};\n    const {\n      ct: w\n    } = o;\n    const {\n      k: y\n    } = getEnvironment();\n    const {\n      K: S,\n      rn: m\n    } = s;\n    const [O, M] = t(\"showNativeOverlaidScrollbars\");\n    const [T, k] = t(\"scrollbars.theme\");\n    const [R, V] = t(\"scrollbars.visibility\");\n    const [L, U] = t(\"scrollbars.autoHide\");\n    const [P, N] = t(\"scrollbars.autoHideSuspend\");\n    const [q] = t(\"scrollbars.autoHideDelay\");\n    const [B, F] = t(\"scrollbars.dragScroll\");\n    const [j, X] = t(\"scrollbars.clickScroll\");\n    const [Y, W] = t(\"overflow\");\n    const J = b && !n;\n    const G = m.x || m.y;\n    const K = r || f || p || h || n;\n    const Q = v || V || W;\n    const Z = O && y.x && y.y;\n    const setScrollbarVisibility = (t, n, o) => {\n      const s = t.includes(E) && (R === x || R === \"auto\" && n === E);\n      H(dt, s, o);\n      return s;\n    };\n    d = q;\n    if (J) {\n      if (P && G) {\n        manageAutoHideSuspension(false);\n        _();\n        g(() => {\n          _ = addEventListener($, \"scroll\", bind(manageAutoHideSuspension, true), {\n            A: true\n          });\n        });\n      } else {\n        manageAutoHideSuspension(true);\n      }\n    }\n    if (M) {\n      H(ct, Z);\n    }\n    if (k) {\n      H(u);\n      H(T, true);\n      u = T;\n    }\n    if (N && !P) {\n      manageAutoHideSuspension(true);\n    }\n    if (U) {\n      l = L === \"move\";\n      i = L === \"leave\";\n      a = L === \"never\";\n      manageScrollbarsAutoHide(a, true);\n    }\n    if (F) {\n      H(yt, B);\n    }\n    if (X) {\n      H(wt, !!j);\n    }\n    if (Q) {\n      const t = setScrollbarVisibility(Y.x, S.x, true);\n      const n = setScrollbarVisibility(Y.y, S.y, false);\n      const o = t && n;\n      H(ft, !o);\n    }\n    if (K) {\n      I();\n      z();\n      D();\n      p && A();\n      H(pt, !m.x, true);\n      H(pt, !m.y, false);\n      H(lt, w && !C);\n    }\n  }, {}, S];\n};\nconst createStructureSetupElements = t => {\n  const o = getEnvironment();\n  const {\n    U: s,\n    R: e\n  } = o;\n  const {\n    elements: c\n  } = s();\n  const {\n    padding: r,\n    viewport: l,\n    content: i\n  } = c;\n  const a = isHTMLElement(t);\n  const u = a ? {} : t;\n  const {\n    elements: _\n  } = u;\n  const {\n    padding: d,\n    viewport: f,\n    content: v\n  } = _ || {};\n  const p = a ? t : u.target;\n  const h = isBodyElement(p);\n  const g = p.ownerDocument;\n  const b = g.documentElement;\n  const getDocumentWindow = () => g.defaultView || n;\n  const w = bind(staticInitializationElement, [p]);\n  const y = bind(dynamicInitializationElement, [p]);\n  const S = bind(createDiv, \"\");\n  const $ = bind(w, S, l);\n  const C = bind(y, S, i);\n  const elementHasOverflow = t => {\n    const n = I(t);\n    const o = D(t);\n    const s = getStyles(t, m);\n    const e = getStyles(t, O);\n    return o.w - n.w > 0 && !overflowIsVisible(s) || o.h - n.h > 0 && !overflowIsVisible(e);\n  };\n  const x = $(f);\n  const H = x === p;\n  const E = H && h;\n  const z = !H && C(v);\n  const A = !H && x === z;\n  const M = E ? b : x;\n  const T = E ? M : p;\n  const k = !H && y(S, r, d);\n  const R = !A && z;\n  const L = [R, M, k, T].map(t => isHTMLElement(t) && !parent(t) && t);\n  const elementIsGenerated = t => t && inArray(L, t);\n  const B = !elementIsGenerated(M) && elementHasOverflow(M) ? M : p;\n  const F = E ? b : M;\n  const j = E ? g : M;\n  const X = {\n    vt: p,\n    ht: T,\n    ot: M,\n    ln: k,\n    bt: R,\n    gt: F,\n    Qt: j,\n    an: h ? b : B,\n    Kt: g,\n    wt: h,\n    Mt: a,\n    nt: H,\n    un: getDocumentWindow,\n    yt: t => hasAttrClass(M, q, t),\n    St: (t, n) => addRemoveAttrClass(M, q, t, n),\n    Ot: () => addRemoveAttrClass(F, q, Y, true)\n  };\n  const {\n    vt: J,\n    ht: Q,\n    ln: Z,\n    ot: tt,\n    bt: nt\n  } = X;\n  const ot = [() => {\n    removeAttrs(Q, [P, V]);\n    removeAttrs(J, V);\n    if (h) {\n      removeAttrs(b, [V, P]);\n    }\n  }];\n  let st = contents([nt, tt, Z, Q, J].find(t => t && !elementIsGenerated(t)));\n  const et = E ? J : nt || tt;\n  const ct = bind(runEachAndClear, ot);\n  const appendElements = () => {\n    const t = getDocumentWindow();\n    const n = getFocusedElement();\n    const unwrap = t => {\n      appendChildren(parent(t), contents(t));\n      removeElements(t);\n    };\n    const prepareWrapUnwrapFocus = t => addEventListener(t, \"focusin focusout focus blur\", stopAndPrevent, {\n      I: true,\n      H: false\n    });\n    const o = \"tabindex\";\n    const s = getAttr(tt, o);\n    const c = prepareWrapUnwrapFocus(n);\n    setAttrs(Q, P, H ? \"\" : N);\n    setAttrs(Z, G, \"\");\n    setAttrs(tt, q, \"\");\n    setAttrs(nt, K, \"\");\n    if (!H) {\n      setAttrs(tt, o, s || \"-1\");\n      h && setAttrs(b, U, \"\");\n    }\n    appendChildren(et, st);\n    appendChildren(Q, Z);\n    appendChildren(Z || Q, !H && tt);\n    appendChildren(tt, nt);\n    push(ot, [c, () => {\n      const t = getFocusedElement();\n      const n = elementIsGenerated(tt);\n      const e = n && t === tt ? J : t;\n      const c = prepareWrapUnwrapFocus(e);\n      removeAttrs(Z, G);\n      removeAttrs(nt, K);\n      removeAttrs(tt, q);\n      h && removeAttrs(b, U);\n      s ? setAttrs(tt, o, s) : removeAttrs(tt, o);\n      elementIsGenerated(nt) && unwrap(nt);\n      n && unwrap(tt);\n      elementIsGenerated(Z) && unwrap(Z);\n      focusElement(e);\n      c();\n    }]);\n    if (e && !H) {\n      addAttrClass(tt, q, W);\n      push(ot, bind(removeAttrs, tt, q));\n    }\n    focusElement(!H && h && n === J && t.top === t ? tt : n);\n    c();\n    st = 0;\n    return ct;\n  };\n  return [X, appendElements, ct];\n};\nconst createTrinsicUpdateSegment = ({\n  bt: t\n}) => ({\n  Zt: n,\n  _n: o,\n  Dt: s\n}) => {\n  const {\n    xt: e\n  } = n || {};\n  const {\n    $t: c\n  } = o;\n  const r = t && (e || s);\n  if (r) {\n    setStyles(t, {\n      [C]: c && \"100%\"\n    });\n  }\n};\nconst createPaddingUpdateSegment = ({\n  ht: t,\n  ln: n,\n  ot: o,\n  nt: s\n}, e) => {\n  const [c, r] = createCache({\n    i: equalTRBL,\n    o: topRightBottomLeft()\n  }, bind(topRightBottomLeft, t, \"padding\", \"\"));\n  return ({\n    It: t,\n    Zt: l,\n    _n: i,\n    Dt: a\n  }) => {\n    let [u, _] = r(a);\n    const {\n      R: d\n    } = getEnvironment();\n    const {\n      ft: f,\n      Ht: v,\n      Ct: m\n    } = l || {};\n    const {\n      ct: O\n    } = i;\n    const [C, x] = t(\"paddingAbsolute\");\n    const H = a || v;\n    if (f || _ || H) {\n      [u, _] = c(a);\n    }\n    const E = !s && (x || m || _);\n    if (E) {\n      const t = !C || !n && !d;\n      const s = u.r + u.l;\n      const c = u.t + u.b;\n      const r = {\n        [y]: t && !O ? -s : 0,\n        [S]: t ? -c : 0,\n        [w]: t && O ? -s : 0,\n        top: t ? -u.t : 0,\n        right: t ? O ? -u.r : \"auto\" : 0,\n        left: t ? O ? \"auto\" : -u.l : 0,\n        [$]: t && `calc(100% + ${s}px)`\n      };\n      const l = {\n        [p]: t ? u.t : 0,\n        [h]: t ? u.r : 0,\n        [b]: t ? u.b : 0,\n        [g]: t ? u.l : 0\n      };\n      setStyles(n || o, r);\n      setStyles(o, l);\n      assignDeep(e, {\n        ln: u,\n        dn: !t,\n        rt: n ? l : assignDeep({}, r, l)\n      });\n    }\n    return {\n      fn: E\n    };\n  };\n};\nconst createOverflowUpdateSegment = (t, s) => {\n  const e = getEnvironment();\n  const {\n    ht: c,\n    ln: r,\n    ot: l,\n    nt: a,\n    Qt: u,\n    gt: _,\n    wt: d,\n    St: f,\n    un: v\n  } = t;\n  const {\n    R: p\n  } = e;\n  const h = d && a;\n  const g = bind(o, 0);\n  const b = {\n    display: () => false,\n    direction: t => t !== \"ltr\",\n    flexDirection: t => t.endsWith(\"-reverse\"),\n    writingMode: t => t !== \"horizontal-tb\"\n  };\n  const w = keys(b);\n  const y = {\n    i: equalWH,\n    o: {\n      w: 0,\n      h: 0\n    }\n  };\n  const S = {\n    i: equalXY,\n    o: {}\n  };\n  const setMeasuringMode = t => {\n    f(X, !h && t);\n  };\n  const getMeasuredScrollCoordinates = t => {\n    const n = w.some(n => {\n      const o = t[n];\n      return o && b[n](o);\n    });\n    if (!n) {\n      return {\n        D: {\n          x: 0,\n          y: 0\n        },\n        M: {\n          x: 1,\n          y: 1\n        }\n      };\n    }\n    setMeasuringMode(true);\n    const o = getElementScroll(_);\n    const s = f(J, true);\n    const e = addEventListener(u, E, t => {\n      const n = getElementScroll(_);\n      if (t.isTrusted && n.x === o.x && n.y === o.y) {\n        stopPropagation(t);\n      }\n    }, {\n      I: true,\n      A: true\n    });\n    scrollElementTo(_, {\n      x: 0,\n      y: 0\n    });\n    s();\n    const c = getElementScroll(_);\n    const r = D(_);\n    scrollElementTo(_, {\n      x: r.w,\n      y: r.h\n    });\n    const l = getElementScroll(_);\n    scrollElementTo(_, {\n      x: l.x - c.x < 1 && -r.w,\n      y: l.y - c.y < 1 && -r.h\n    });\n    const a = getElementScroll(_);\n    scrollElementTo(_, o);\n    i(() => e());\n    return {\n      D: c,\n      M: a\n    };\n  };\n  const getOverflowAmount = (t, o) => {\n    const s = n.devicePixelRatio % 1 !== 0 ? 1 : 0;\n    const e = {\n      w: g(t.w - o.w),\n      h: g(t.h - o.h)\n    };\n    return {\n      w: e.w > s ? e.w : 0,\n      h: e.h > s ? e.h : 0\n    };\n  };\n  const [m, O] = createCache(y, bind(getFractionalSize, l));\n  const [$, C] = createCache(y, bind(D, l));\n  const [z, I] = createCache(y);\n  const [M] = createCache(S);\n  const [T, k] = createCache(y);\n  const [R] = createCache(S);\n  const [V] = createCache({\n    i: (t, n) => equal(t, n, w),\n    o: {}\n  }, () => hasDimensions(l) ? getStyles(l, w) : {});\n  const [U, N] = createCache({\n    i: (t, n) => equalXY(t.D, n.D) && equalXY(t.M, n.M),\n    o: getZeroScrollCoordinates()\n  });\n  const q = getStaticPluginModuleInstance(zt);\n  const createViewportOverflowStyleClassName = (t, n) => {\n    const o = n ? B : F;\n    return `${o}${capitalizeFirstLetter(t)}`;\n  };\n  const setViewportOverflowStyle = t => {\n    const createAllOverflowStyleClassNames = t => [x, H, E].map(n => createViewportOverflowStyleClassName(n, t));\n    const n = createAllOverflowStyleClassNames(true).concat(createAllOverflowStyleClassNames()).join(\" \");\n    f(n);\n    f(keys(t).map(n => createViewportOverflowStyleClassName(t[n], n === \"x\")).join(\" \"), true);\n  };\n  return ({\n    It: n,\n    Zt: o,\n    _n: i,\n    Dt: a\n  }, {\n    fn: u\n  }) => {\n    const {\n      ft: _,\n      Ht: d,\n      Ct: b,\n      dt: w,\n      zt: y\n    } = o || {};\n    const S = q && q.tt(t, s, i, e, n);\n    const {\n      it: x,\n      ut: H,\n      _t: E\n    } = S || {};\n    const [D, B] = getShowNativeOverlaidScrollbars(n, e);\n    const [F, j] = n(\"overflow\");\n    const X = overflowIsVisible(F.x);\n    const Y = overflowIsVisible(F.y);\n    const J = true;\n    let K = O(a);\n    let Q = C(a);\n    let Z = I(a);\n    let tt = k(a);\n    if (B && p) {\n      f(W, !D);\n    }\n    {\n      if (hasAttrClass(c, P, L)) {\n        setMeasuringMode(true);\n      }\n      const [t] = H ? H() : [];\n      const [n] = K = m(a);\n      const [o] = Q = $(a);\n      const s = A(l);\n      const e = h && getWindowSize(v());\n      const r = {\n        w: g(o.w + n.w),\n        h: g(o.h + n.h)\n      };\n      const i = {\n        w: g((e ? e.w : s.w + g(s.w - o.w)) + n.w),\n        h: g((e ? e.h : s.h + g(s.h - o.h)) + n.h)\n      };\n      t && t();\n      tt = T(i);\n      Z = z(getOverflowAmount(r, i), a);\n    }\n    const [nt, ot] = tt;\n    const [st, et] = Z;\n    const [ct, rt] = Q;\n    const [lt, it] = K;\n    const [at, ut] = M({\n      x: st.w > 0,\n      y: st.h > 0\n    });\n    const _t = X && Y && (at.x || at.y) || X && at.x && !at.y || Y && at.y && !at.x;\n    const dt = u || b || y || it || rt || ot || et || j || B || J;\n    const ft = createViewportOverflowState(at, F);\n    const [vt, pt] = R(ft.K);\n    const [ht, gt] = V(a);\n    const bt = b || w || gt || ut || a;\n    const [wt, yt] = bt ? U(getMeasuredScrollCoordinates(ht), a) : N();\n    if (dt) {\n      pt && setViewportOverflowStyle(ft.K);\n      if (E && x) {\n        setStyles(l, E(ft, i, x(ft, ct, lt)));\n      }\n    }\n    setMeasuringMode(false);\n    addRemoveAttrClass(c, P, L, _t);\n    addRemoveAttrClass(r, G, L, _t);\n    assignDeep(s, {\n      K: vt,\n      Vt: {\n        x: nt.w,\n        y: nt.h\n      },\n      Rt: {\n        x: st.w,\n        y: st.h\n      },\n      rn: at,\n      Lt: sanitizeScrollCoordinates(wt, st)\n    });\n    return {\n      en: pt,\n      nn: ot,\n      sn: et,\n      cn: yt || et,\n      vn: bt\n    };\n  };\n};\nconst createStructureSetup = t => {\n  const [n, o, s] = createStructureSetupElements(t);\n  const e = {\n    ln: {\n      t: 0,\n      r: 0,\n      b: 0,\n      l: 0\n    },\n    dn: false,\n    rt: {\n      [y]: 0,\n      [S]: 0,\n      [w]: 0,\n      [p]: 0,\n      [h]: 0,\n      [b]: 0,\n      [g]: 0\n    },\n    Vt: {\n      x: 0,\n      y: 0\n    },\n    Rt: {\n      x: 0,\n      y: 0\n    },\n    K: {\n      x: H,\n      y: H\n    },\n    rn: {\n      x: false,\n      y: false\n    },\n    Lt: getZeroScrollCoordinates()\n  };\n  const {\n    vt: c,\n    gt: r,\n    nt: l,\n    Ot: i\n  } = n;\n  const {\n    R: a,\n    k: u\n  } = getEnvironment();\n  const _ = !a && (u.x || u.y);\n  const d = [createTrinsicUpdateSegment(n), createPaddingUpdateSegment(n, e), createOverflowUpdateSegment(n, e)];\n  return [o, t => {\n    const n = {};\n    const o = _;\n    const s = o && getElementScroll(r);\n    const e = s && i();\n    each(d, o => {\n      assignDeep(n, o(t, n) || {});\n    });\n    scrollElementTo(r, s);\n    e && e();\n    !l && scrollElementTo(c, 0);\n    return n;\n  }, e, n, s];\n};\nconst createSetups = (t, n, o, s, e) => {\n  let c = false;\n  const r = createOptionCheck(n, {});\n  const [l, i, a, u, _] = createStructureSetup(t);\n  const [d, f, v] = createObserversSetup(u, a, r, t => {\n    update({}, t);\n  });\n  const [p, h,, g] = createScrollbarsSetup(t, n, v, a, u, e);\n  const updateHintsAreTruthy = t => keys(t).some(n => !!t[n]);\n  const update = (t, e) => {\n    if (o()) {\n      return false;\n    }\n    const {\n      pn: r,\n      Dt: l,\n      At: a,\n      hn: u\n    } = t;\n    const _ = r || {};\n    const d = !!l || !c;\n    const p = {\n      It: createOptionCheck(n, _, d),\n      pn: _,\n      Dt: d\n    };\n    if (u) {\n      h(p);\n      return false;\n    }\n    const g = e || f(assignDeep({}, p, {\n      At: a\n    }));\n    const b = i(assignDeep({}, p, {\n      _n: v,\n      Zt: g\n    }));\n    h(assignDeep({}, p, {\n      Zt: g,\n      tn: b\n    }));\n    const w = updateHintsAreTruthy(g);\n    const y = updateHintsAreTruthy(b);\n    const S = w || y || !isEmptyObject(_) || d;\n    c = true;\n    S && s(t, {\n      Zt: g,\n      tn: b\n    });\n    return S;\n  };\n  return [() => {\n    const {\n      an: t,\n      gt: n,\n      Ot: o\n    } = u;\n    const s = getElementScroll(t);\n    const e = [d(), l(), p()];\n    const c = o();\n    scrollElementTo(n, s);\n    c();\n    return bind(runEachAndClear, e);\n  }, update, () => ({\n    gn: v,\n    bn: a\n  }), {\n    wn: u,\n    yn: g\n  }, _];\n};\nconst OverlayScrollbars = (t, n, o) => {\n  const {\n    N: s\n  } = getEnvironment();\n  const e = isHTMLElement(t);\n  const c = e ? t : t.target;\n  const r = getInstance(c);\n  if (n && !r) {\n    let r = false;\n    const l = [];\n    const i = {};\n    const validateOptions = t => {\n      const n = removeUndefinedProperties(t, true);\n      const o = getStaticPluginModuleInstance(xt);\n      return o ? o(n, true) : n;\n    };\n    const a = assignDeep({}, s(), validateOptions(n));\n    const [u, _, d] = createEventListenerHub();\n    const [f, v, p] = createEventListenerHub(o);\n    const triggerEvent = (t, n) => {\n      p(t, n);\n      d(t, n);\n    };\n    const [h, g, b, w, y] = createSetups(t, a, () => r, ({\n      pn: t,\n      Dt: n\n    }, {\n      Zt: o,\n      tn: s\n    }) => {\n      const {\n        ft: e,\n        Ct: c,\n        xt: r,\n        Ht: l,\n        Et: i,\n        dt: a\n      } = o;\n      const {\n        nn: u,\n        sn: _,\n        en: d,\n        cn: f\n      } = s;\n      triggerEvent(\"updated\", [S, {\n        updateHints: {\n          sizeChanged: !!e,\n          directionChanged: !!c,\n          heightIntrinsicChanged: !!r,\n          overflowEdgeChanged: !!u,\n          overflowAmountChanged: !!_,\n          overflowStyleChanged: !!d,\n          scrollCoordinatesChanged: !!f,\n          contentMutation: !!l,\n          hostMutation: !!i,\n          appear: !!a\n        },\n        changedOptions: t || {},\n        force: !!n\n      }]);\n    }, t => triggerEvent(\"scroll\", [S, t]));\n    const destroy = t => {\n      removeInstance(c);\n      runEachAndClear(l);\n      r = true;\n      triggerEvent(\"destroyed\", [S, t]);\n      _();\n      v();\n    };\n    const S = {\n      options(t, n) {\n        if (t) {\n          const o = n ? s() : {};\n          const e = getOptionsDiff(a, assignDeep(o, validateOptions(t)));\n          if (!isEmptyObject(e)) {\n            assignDeep(a, e);\n            g({\n              pn: e\n            });\n          }\n        }\n        return assignDeep({}, a);\n      },\n      on: f,\n      off: (t, n) => {\n        t && n && v(t, n);\n      },\n      state() {\n        const {\n          gn: t,\n          bn: n\n        } = b();\n        const {\n          ct: o\n        } = t;\n        const {\n          Vt: s,\n          Rt: e,\n          K: c,\n          rn: l,\n          ln: i,\n          dn: a,\n          Lt: u\n        } = n;\n        return assignDeep({}, {\n          overflowEdge: s,\n          overflowAmount: e,\n          overflowStyle: c,\n          hasOverflow: l,\n          scrollCoordinates: {\n            start: u.D,\n            end: u.M\n          },\n          padding: i,\n          paddingAbsolute: a,\n          directionRTL: o,\n          destroyed: r\n        });\n      },\n      elements() {\n        const {\n          vt: t,\n          ht: n,\n          ln: o,\n          ot: s,\n          bt: e,\n          gt: c,\n          Qt: r\n        } = w.wn;\n        const {\n          Xt: l,\n          Gt: i\n        } = w.yn;\n        const translateScrollbarStructure = t => {\n          const {\n            Pt: n,\n            Ut: o,\n            Tt: s\n          } = t;\n          return {\n            scrollbar: s,\n            track: o,\n            handle: n\n          };\n        };\n        const translateScrollbarsSetupElement = t => {\n          const {\n            Yt: n,\n            Wt: o\n          } = t;\n          const s = translateScrollbarStructure(n[0]);\n          return assignDeep({}, s, {\n            clone: () => {\n              const t = translateScrollbarStructure(o());\n              g({\n                hn: true\n              });\n              return t;\n            }\n          });\n        };\n        return assignDeep({}, {\n          target: t,\n          host: n,\n          padding: o || s,\n          viewport: s,\n          content: e || s,\n          scrollOffsetElement: c,\n          scrollEventElement: r,\n          scrollbarHorizontal: translateScrollbarsSetupElement(l),\n          scrollbarVertical: translateScrollbarsSetupElement(i)\n        });\n      },\n      update: t => g({\n        Dt: t,\n        At: true\n      }),\n      destroy: bind(destroy, false),\n      plugin: t => i[keys(t)[0]]\n    };\n    push(l, [y]);\n    addInstance(c, S);\n    registerPluginModuleInstances($t, OverlayScrollbars, [S, u, i]);\n    if (cancelInitialization(w.wn.wt, !e && t.cancel)) {\n      destroy(true);\n      return S;\n    }\n    push(l, h());\n    triggerEvent(\"initialized\", [S]);\n    S.update();\n    return S;\n  }\n  return r;\n};\nOverlayScrollbars.plugin = t => {\n  const n = isArray(t);\n  const o = n ? t : [t];\n  const s = o.map(t => registerPluginModuleInstances(t, OverlayScrollbars)[0]);\n  addPlugins(o);\n  return n ? s : s[0];\n};\nOverlayScrollbars.valid = t => {\n  const n = t && t.elements;\n  const o = isFunction(n) && n();\n  return isPlainObject(o) && !!getInstance(o.target);\n};\nOverlayScrollbars.env = () => {\n  const {\n    T: t,\n    k: n,\n    R: o,\n    V: s,\n    B: e,\n    F: c,\n    U: r,\n    P: l,\n    N: i,\n    q: a\n  } = getEnvironment();\n  return assignDeep({}, {\n    scrollbarsSize: t,\n    scrollbarsOverlaid: n,\n    scrollbarsHiding: o,\n    scrollTimeline: s,\n    staticDefaultInitialization: e,\n    staticDefaultOptions: c,\n    getDefaultInitialization: r,\n    setDefaultInitialization: l,\n    getDefaultOptions: i,\n    setDefaultOptions: a\n  });\n};\nOverlayScrollbars.nonce = setNonce;\nexport { Dt as ClickScrollPlugin, OverlayScrollbars, It as ScrollbarsHidingPlugin, Et as SizeObserverPlugin };","map":{"version":3,"names":["createCache","t","n","o","i","s","u","e","c","r","cacheUpdateContextual","l","cacheUpdateIsolated","getCurrentCache","window","HTMLElement","document","Math","max","min","round","abs","sign","cancelAnimationFrame","requestAnimationFrame","a","setTimeout","clearTimeout","getApi","_","d","f","v","isUndefined","isNull","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","isPlainObject","constructor","Object","isHTMLElement","isElement","Element","animationCurrentTime","performance","now","animateNumber","frame","p","each","keys","inArray","indexOf","concat","push","prototype","apply","from","createOrKeepArray","isEmptyArray","deduplicateArray","Set","runEachAndClear","runFn","h","g","b","w","y","S","m","O","$","C","x","H","E","capitalizeFirstLetter","String","toUpperCase","slice","equal","equalWH","equalXY","equalTRBL","noop","bind","selfClearTimeout","debounce","invokeFunctionToDebounce","mergeParms","flush","debouncedFn","arguments","hasOwnProperty","call","assignDeep","removeUndefinedProperties","isEmptyObject","capNumber","getDomTokensArray","split","filter","getAttr","getAttribute","hasAttr","hasAttribute","setAttrs","setAttribute","removeAttrs","removeAttribute","domTokenListAttr","domTokenListOperation","join","reduce","includes","removeAttrClass","addAttrClass","addRemoveAttrClass","hasAttrClass","createDomTokenListClass","removeClass","addClass","find","querySelectorAll","findFirst","querySelector","is","matches","isBodyElement","contents","childNodes","parent","parentElement","closest","getFocusedElement","activeElement","liesBetween","removeElements","removeChild","appendChildren","appendChild","createDiv","createElement","createDOM","innerHTML","trim","getCSSVal","getPropertyValue","validFiniteNumber","isFinite","parseToZeroOrNumber","parseFloat","roundCssNumber","numberToCssPx","setStyles","style","setProperty","getStyles","getComputedStyle","topRightBottomLeft","getTrasformTranslateValue","elementHasDimensions","offsetWidth","offsetHeight","getClientRects","z","getElmWidthHeightProperty","getWindowSize","I","A","D","getFractionalSize","getBoundingClientRect","hasDimensions","domRectHasDimensions","domRectAppeared","removeEventListener","addEventListener","passive","capture","map","stopPropagation","preventDefault","stopAndPrevent","scrollElementTo","scrollLeft","scrollTop","getElementScroll","getZeroScrollCoordinates","M","sanitizeScrollCoordinates","sanitizeAxis","isDefaultDirectionScrollCoordinates","getAxis","getScrollCoordinatesPercent","focusElement","focus","preventScroll","manageListener","createEventListenerHub","Map","removeEvent","get","forEach","clear","addEvent","set","add","triggerEvent","opsStringify","JSON","stringify","getPropByPath","paddingAbsolute","showNativeOverlaidScrollbars","update","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","createOptionCheck","T","k","R","V","L","U","P","N","q","B","F","j","X","Y","W","J","G","K","Q","Z","tt","nt","ot","st","et","ct","rt","lt","it","at","ut","_t","dt","ft","vt","pt","ht","gt","bt","wt","yt","St","getNonce","setNonce","mt","createEnvironment","getNativeScrollbarSize","body","getNativeScrollbarsHiding","firstChild","lastChild","nonce","elements","host","padding","viewport","content","slot","cancel","nativeScrollbarsOverlaid","matchMedia","addZoomListener","devicePixelRatio","getEnvironment","resolveInitialization","staticInitializationElement","dynamicInitializationElement","cancelInitialization","Ot","WeakMap","addInstance","removeInstance","delete","getInstance","createEventContentChange","destroy","updateElements","contains","createDOMObserver","observerCallback","attributeName","target","type","oldValue","addedNodes","removedNodes","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","$t","Ct","addPlugins","registerPluginModuleInstances","static","instance","getStaticPluginModuleInstance","xt","Ht","Et","reset","onResized","onScroll","getShowNativeOverlaidScrollbars","overflowIsVisible","createViewportOverflowState","getAxisOverflowStyle","replace","zt","It","readViewportOverflowState","getStatePerAxis","_getViewportOverflowHideOffset","getHideOffsetPerAxis","_hideNativeScrollbars","_arrangeViewport","paddingTop","_undoViewportArrange","assignProps","At","Dt","easing","easedEndPressAnimation","linearPressAnimation","createSizeObserver","onSizeChangedCallbackProxy","ResizeObserverEntry","contentRect","pop","createTrinsicObserver","isHeightIntrinsic","isIntersecting","intersectionRatio","triggerOnTrinsicChangedCallback","intersectionObserverCallback","root","onSizeChanged","createObserversSetup","getDirectionIsRTL","setDirection","onTrinsicChanged","onContentMutation","onHostMutation","ignoreMutationFromOptions","createScrollbarsSetupElements","Mt","initScrollTimeline","source","axis","_addScrollPercentAnimation","Tt","animate","timeline","kt","getViewportPercent","Rt","Vt","getAxisValue","scrollbarStructureAddRemoveClass","scrollbarStyle","scrollbarsAddRemoveClass","refreshScrollbarsHandleLength","createScrollbarStyleFn","refreshScrollbarsHandleOffset","Lt","refreshScrollbarsScrollCoordinates","refreshScrollbarsScrollbarOffset","styleScrollbarPosition","getTranslateValue","transform","generateScrollbarDOM","Ut","Pt","appendElements","Nt","qt","Bt","Ft","jt","Xt","Yt","Wt","Jt","Gt","createScrollbarsSetupEvents","Kt","scrollOffsetElementScrollBy","scrollBy","behavior","left","top","createInteractiveScrollEvents","createRelativeHandleMove","button","isPrimary","pointerType","shiftKey","getHandleOffset","releasePointerCapture","pointerId","setPointerCapture","deltaX","deltaY","deltaMode","createScrollbarsSetup","isHoverablePointerType","manageScrollbarsAutoHideInstantInteraction","Qt","manageScrollbarsAutoHide","manageAutoHideSuspension","onHostMouseEnter","Zt","tn","nn","sn","en","cn","rn","setScrollbarVisibility","createStructureSetupElements","ownerDocument","documentElement","getDocumentWindow","defaultView","elementHasOverflow","elementIsGenerated","ln","an","un","unwrap","prepareWrapUnwrapFocus","createTrinsicUpdateSegment","_n","createPaddingUpdateSegment","right","dn","fn","createOverflowUpdateSegment","display","direction","flexDirection","endsWith","writingMode","setMeasuringMode","getMeasuredScrollCoordinates","some","isTrusted","getOverflowAmount","createViewportOverflowStyleClassName","setViewportOverflowStyle","createAllOverflowStyleClassNames","vn","createStructureSetup","createSetups","updateHintsAreTruthy","pn","hn","gn","bn","wn","yn","OverlayScrollbars","validateOptions","updateHints","sizeChanged","directionChanged","heightIntrinsicChanged","overflowEdgeChanged","overflowAmountChanged","overflowStyleChanged","scrollCoordinatesChanged","contentMutation","hostMutation","appear","changedOptions","force","options","on","off","state","overflowEdge","overflowAmount","overflowStyle","hasOverflow","scrollCoordinates","start","end","directionRTL","destroyed","translateScrollbarStructure","scrollbar","track","handle","translateScrollbarsSetupElement","clone","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugin","valid","env","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","scrollTimeline","staticDefaultInitialization","staticDefaultOptions","getDefaultInitialization","setDefaultInitialization","getDefaultOptions","setDefaultOptions"],"sources":["../src/support/cache.ts","../src/support/compatibility/isBrowser.ts","../src/support/utils/alias.ts","../src/support/compatibility/apis.ts","../src/support/utils/types.ts","../src/support/utils/animation.ts","../src/support/utils/array.ts","../src/support/utils/strings.ts","../src/support/utils/equal.ts","../src/support/utils/noop.ts","../src/support/utils/function.ts","../src/support/utils/object.ts","../src/support/utils/math.ts","../src/support/dom/attribute.ts","../src/support/dom/class.ts","../src/support/dom/traversal.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/dom/style.ts","../src/support/dom/dimensions.ts","../src/support/dom/events.ts","../src/support/dom/scroll.ts","../src/support/dom/focus.ts","../src/support/eventListeners.ts","../src/options.ts","../src/classnames.ts","../src/nonce.ts","../src/environment.ts","../src/initialization.ts","../src/instances.ts","../src/observers/domObserver.ts","../src/plugins/plugins.ts","../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../src/setups/structureSetup/structureSetup.utils.ts","../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/setups/observersSetup/observersSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/setups.ts","../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser =\r\n  // deno has the global `window` defined\r\n  typeof window !== 'undefined' &&\r\n  // make sure HTML element is available\r\n  typeof HTMLElement !== 'undefined' &&\r\n  // make sure document is defined\r\n  !!window.document;\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const mathSign = Math.sign;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n","import type { PlainObject } from '~/typings';\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : Object.prototype.toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> =>\r\n  !!obj && obj.constructor === Object;\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => obj instanceof HTMLElement;\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => obj instanceof Element;\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\r\n  arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * If the passed value is an array like structure and not a string it will be converted into an array.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[] | ArrayLike<T>): T[] => {\r\n  if (isArray(value)) {\r\n    return value;\r\n  }\r\n  return !isString(value) && isArrayLike(value) ? from(value) : [value];\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => (fn ? fn.apply(undefined, args || []) : true); // return true when fn is falsy to not break the loop\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strVisible = 'visible';\r\nexport const strHidden = 'hidden';\r\nexport const strScroll = 'scroll';\r\n\r\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\r\n  const finalStr = String(str || '');\r\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\r\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\r\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Defines the calling on the leading edge of the timeout.\r\n   */\r\n  _leading?: boolean;\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(() => callback(), isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  const { _timeout, _maxDelay, _leading, _mergeParams } = options || {};\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let leadingInvoked: boolean | undefined;\r\n  let clear = noop;\r\n\r\n  const invokeFunctionToDebounce = function (args: Parameters<FunctionToDebounce>) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    leadingInvoked = maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n      let timeoutId: number | undefined;\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      if (_leading && !leadingInvoked) {\r\n        boundInvoke();\r\n        leadingInvoked = true;\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(() => (leadingInvoked = undefined), finalTimeout);\r\n      } else {\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n\r\n        if (hasMaxWait && !maxTimeoutId) {\r\n          maxTimeoutId = setT(flush, finalMaxWait as number);\r\n        }\r\n      }\r\n\r\n      clear = () => clearTimeoutFn(timeoutId as number);\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => !keys(obj).length;\r\n","import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n","import type { HTMLElementTarget } from './types';\r\nimport { bind, deduplicateArray, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  deduplicateArray((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | number | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, String(value || ''));\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => {\r\n      initialArrSet[operation](token);\r\n    });\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return bind(addAttrClass, elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n","import type { AttributeElementTarget, DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: AttributeElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: AttributeElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: AttributeElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: AttributeElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | false | null | undefined,\r\n  classNameB: string | false | null | undefined\r\n) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { NodeElementTarget } from './types';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const find = (selector: string, elm?: NodeElementTarget): Element[] => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n  return rootElm ? from(rootElm.querySelectorAll(selector)) : [];\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const findFirst = (selector: string, elm?: NodeElementTarget): NodeElementTarget => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n  return rootElm && rootElm.querySelector(selector);\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nexport const is = (elm: NodeElementTarget, selector: string): boolean =>\r\n  isElement(elm) && elm.matches(selector);\r\n\r\nexport const isBodyElement = (elm: NodeElementTarget) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nexport const children = (elm: NodeElementTarget, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nexport const contents = (elm: NodeElementTarget): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nexport const parent = (elm: NodeElementTarget): NodeElementTarget => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nexport const closest = (elm: NodeElementTarget, selector: string): NodeElementTarget =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nexport const getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nexport const liesBetween = (\r\n  elm: NodeElementTarget,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n","import type { NodeElementTarget, NodeElementTargetCollection } from './types';\r\nimport { createOrKeepArray, each } from '../utils/array';\r\nimport { parent } from './traversal';\r\nimport { bind } from '../utils';\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeElementTargetCollection): void => {\r\n  each(createOrKeepArray(nodes), (node) => {\r\n    const parentElm = parent(node);\r\n    node && parentElm && parentElm.removeChild(node);\r\n  });\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: NodeElementTarget, children: NodeElementTargetCollection) =>\r\n  bind(\r\n    removeElements,\r\n    node &&\r\n      children &&\r\n      each(createOrKeepArray(children), (child) => {\r\n        child && node.appendChild(child);\r\n      })\r\n  );\r\n","import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each, from } from '../utils/array';\r\nimport { isString, isNumber, isObject, isNull, isBoolean } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const roundCssNumber = (value: number) => Math.round(value * 10000) / 10000;\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${roundCssNumber(validFiniteNumber(ratio) * 100)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${roundCssNumber(validFiniteNumber(number))}px`;\r\n\r\nexport function setStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObject | false | null | undefined\r\n): void {\r\n  elm &&\r\n    styles &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value =\r\n          isNull(rawValue) || isBoolean(rawValue)\r\n            ? ''\r\n            : isNumber(rawValue)\r\n            ? numberToCssPx(rawValue)\r\n            : rawValue;\r\n\r\n        if (name.indexOf('--') === 0) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : from(styles).reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerTarget = EventTarget | false | null | undefined;\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target && target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: ((event: T) => any) | false | null | undefined,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener && listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target && target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventListenerTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import type { XY } from './offset';\r\nimport type { WH } from './dimensions';\r\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\r\n\r\nexport interface ScrollCoordinates {\r\n  /** The start (origin) scroll coordinates for each axis. */\r\n  _start: XY<number>;\r\n  /** The end scroll coordinates for each axis. */\r\n  _end: XY<number>;\r\n}\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n\r\n/**\r\n * Scroll Coordinates which are 0.\r\n */\r\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\r\n  _start: { x: 0, y: 0 },\r\n  _end: { x: 0, y: 0 },\r\n});\r\n\r\n/**\r\n * Sanatizes raw scroll coordinates.\r\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\r\n * Makes sure that each axis has `0` either in the start or end coordinates.\r\n * @param rawScrollCoordinates The raw scroll coordinates.\r\n * @param overflowAmount The overflow amount.\r\n * @returns\r\n */\r\nexport const sanitizeScrollCoordinates = (\r\n  rawScrollCoordinates: ScrollCoordinates,\r\n  overflowAmount: WH<number>\r\n) => {\r\n  const { _start, _end } = rawScrollCoordinates;\r\n  const { w, h } = overflowAmount;\r\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\r\n    let newStart = mathSign(start) * amount;\r\n    let newEnd = mathSign(end) * amount;\r\n\r\n    if (newStart === newEnd) {\r\n      const startAbs = mathAbs(start);\r\n      const endAbs = mathAbs(end);\r\n\r\n      newEnd = startAbs > endAbs ? 0 : newEnd;\r\n      newStart = startAbs < endAbs ? 0 : newStart;\r\n    }\r\n\r\n    // in doubt set start to 0\r\n    newStart = newStart === newEnd ? 0 : newStart;\r\n\r\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\r\n  };\r\n\r\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\r\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\r\n\r\n  return {\r\n    _start: {\r\n      x: startX,\r\n      y: startY,\r\n    },\r\n    _end: {\r\n      x: endX,\r\n      y: endY,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\r\n * For the default scroll direction the following must be true:\r\n * 1. Start value is `0`.\r\n * 2. End value <= Start value.\r\n * @param scrollCoordinates The scroll coordinates.\r\n */\r\nexport const isDefaultDirectionScrollCoordinates = ({\r\n  _start,\r\n  _end,\r\n}: ScrollCoordinates): XY<boolean> => {\r\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x),\r\n    y: getAxis(_start.y, _end.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current scroll percent between 0..1 for each axis.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param currentScroll The current scroll position of the element.\r\n */\r\nexport const getScrollCoordinatesPercent = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  currentScroll: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, current: number) =>\r\n    capNumber(0, 1, (start - current) / (start - end) || 0);\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, currentScroll.x),\r\n    y: getAxis(_start.y, _end.y, currentScroll.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the scroll position of the given percent.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param percent The percentage of the scroll.\r\n */\r\nexport const getScrollCoordinatesPosition = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  percent: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, percent.x),\r\n    y: getAxis(_start.y, _end.y, percent.y),\r\n  };\r\n};\r\n","import type { NodeElementTarget } from './types';\r\n\r\nexport const focusElement = (element: NodeElementTarget) => {\r\n  if (element && (element as HTMLElement).focus) {\r\n    (element as HTMLElement).focus({ preventScroll: true });\r\n  }\r\n};\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The scrollbar click scroll behavior.\r\n */\r\nexport type ScrollbarsClickScrollBehavior = boolean | 'instant';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether it is possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether it is possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: ScrollbarsClickScrollBehavior;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        // @ts-ignore\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","import { strOverflowX, strOverflowY } from './support';\r\n\r\nconst dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// shared\r\nexport const dataValueNoClipping = 'noClipping';\r\n\r\n// body\r\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataValueHostIsHost = 'host';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\r\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportMeasuring = 'measuring';\r\nexport const dataValueViewportScrolling = 'scrolling';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportNoContent = 'noContent';\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","let nonce: string | undefined;\r\n\r\nexport const getNonce = () => nonce;\r\nexport const setNonce = (newNonce: string | undefined) => {\r\n  nonce = newNonce;\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  getFractionalSize,\r\n  getClientSize,\r\n  getOffsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  getStyles,\r\n  isBodyElement,\r\n  isFunction,\r\n  addEventListener,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\nimport { getNonce } from './nonce';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\r\n    appendChildren(document.body, measureElm);\r\n    appendChildren(document.body, measureElm);\r\n\r\n    const cSize = getClientSize(measureElm);\r\n    const oSize = getOffsetSize(measureElm);\r\n    const fSize = getFractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const styleElm = envElm.lastChild as HTMLStyleElement;\r\n  const nonce = getNonce();\r\n\r\n  if (nonce) {\r\n    styleElm.nonce = nonce;\r\n  }\r\n\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  addEventListener(wnd, 'resize', () => {\r\n    triggerEvent('r', []);\r\n  });\r\n\r\n  if (\r\n    isFunction(wnd.matchMedia) &&\r\n    !nativeScrollbarsHiding &&\r\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\r\n  ) {\r\n    const addZoomListener = (onZoom: () => void) => {\r\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\r\n      addEventListener(\r\n        media,\r\n        'change',\r\n        () => {\r\n          onZoom();\r\n          addZoomListener(onZoom);\r\n        },\r\n        {\r\n          _once: true,\r\n        }\r\n      );\r\n    };\r\n    addZoomListener(() => {\r\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\r\n        updateNativeScrollbarSizeCache();\r\n\r\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\r\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nexport const getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n  isString,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[] | readonly string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        const newValue =\r\n          isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '');\r\n        // narrow down attributeValue type to `string` or `null` but don't overwrite `<empty string>` with `null`\r\n        const attributeValue = isString(newValue) ? newValue : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n  ScrollbarsClickScrollBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n      const scrollbarsClickScrollAllowedValues: OptionsTemplateValue<ScrollbarsClickScrollBehavior> =\r\n        [booleanAllowedValues, oTypes.string];\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: scrollbarsClickScrollAllowedValues, // true || false || instant\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = getOffsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import { strHidden, strScroll, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle } from '~/typings';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Creates a viewport overflow state object.\r\n * @param hasOverflow The information whether an axis has overflow.\r\n * @param overflowBehavior The overflow behavior according to the options.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const createViewportOverflowState = (\r\n  hasOverflow: Partial<XY<boolean>>,\r\n  overflowBehavior: XY<OverflowBehavior>\r\n): ViewportOverflowState => {\r\n  const getAxisOverflowStyle = (\r\n    axisBehavior: OverflowBehavior,\r\n    axisHasOverflow: boolean | undefined,\r\n    perpendicularBehavior: OverflowBehavior,\r\n    perpendicularOverflow: boolean | undefined\r\n  ): OverflowStyle => {\r\n    // convert behavior to style:\r\n    // 'visible'        -> 'hidden'\r\n    // 'hidden'         -> 'hidden'\r\n    // 'scroll'         -> 'scroll'\r\n    // 'visible-hidden' -> 'hidden'\r\n    // 'visible-scroll' -> 'scroll'\r\n    const behaviorStyle =\r\n      axisBehavior === strVisible\r\n        ? strHidden\r\n        : (axisBehavior.replace(`${strVisible}-`, '') as OverflowStyle);\r\n    const axisOverflowVisible = overflowIsVisible(axisBehavior);\r\n    const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\r\n\r\n    // if no axis has overflow set 'hidden'\r\n    if (!axisHasOverflow && !perpendicularOverflow) {\r\n      return strHidden;\r\n    }\r\n\r\n    // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\r\n    if (axisOverflowVisible && perpendicularOverflowVisible) {\r\n      return strVisible;\r\n    }\r\n\r\n    // this this axis has a visible behavior\r\n    if (axisOverflowVisible) {\r\n      const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\r\n      return axisHasOverflow && perpendicularOverflow\r\n        ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\r\n        : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\r\n    }\r\n\r\n    const nonOverflow =\r\n      perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\r\n    return axisHasOverflow\r\n      ? behaviorStyle // if this axis has an overflow\r\n      : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\r\n  };\r\n\r\n  const _overflowStyle = {\r\n    x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\r\n    y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\r\n  };\r\n\r\n  return {\r\n    _overflowStyle,\r\n    _overflowScroll: {\r\n      x: _overflowStyle.x === strScroll,\r\n      y: _overflowStyle.y === strScroll,\r\n    },\r\n  };\r\n};\r\n","import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  removeAttrClass,\r\n  strWidth,\r\n  strOverflowY,\r\n  strOverflowX,\r\n  strScroll,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport { getShowNativeOverlaidScrollbars } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { WH } from '~/support';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        /**\r\n         * Gets the current overflow state of the viewport.\r\n         */\r\n        const readViewportOverflowState = (): ViewportOverflowState => {\r\n          const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n            const overflowStyle = getStyles(_viewport, styleKey) as OverflowStyle;\r\n            const overflowScroll = overflowStyle === strScroll;\r\n\r\n            return [overflowStyle, overflowScroll] as const;\r\n          };\r\n\r\n          const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n          const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n          return {\r\n            _overflowStyle: {\r\n              x: xOverflowStyle,\r\n              y: yOverflowStyle,\r\n            },\r\n            _overflowScroll: {\r\n              x: xOverflowScroll,\r\n              y: yOverflowScroll,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Gets the hide offset matching the passed overflow state.\r\n         * @param viewportOverflowState The overflow state of the viewport\r\n         */\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean\r\n        ): StyleObject | undefined => {\r\n          if (!_viewportIsTarget) {\r\n            const viewportStyleObj: StyleObject = assignDeep(\r\n              {},\r\n              {\r\n                [strMarginRight]: 0,\r\n                [strMarginBottom]: 0,\r\n                [strMarginLeft]: 0,\r\n              }\r\n            );\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n\r\n            return viewportStyleObj;\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState = viewportOverflowState || readViewportOverflowState();\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            const addArrange = removeAttrClass(\r\n              _viewport,\r\n              dataAttributeViewport,\r\n              dataValueViewportArrange\r\n            );\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                setStyles(\r\n                  _viewport,\r\n                  assignDeep(\r\n                    {},\r\n                    prevStyle,\r\n                    _hideNativeScrollbars(\r\n                      finalViewportOverflowState,\r\n                      observersSetupState,\r\n                      doViewportArrange\r\n                    )\r\n                  )\r\n                );\r\n                addArrange();\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, selfClearTimeout } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        targetOffset: number,\r\n        handleLength: number,\r\n        onClickScrollCompleted: (stopped: boolean) => void\r\n      ) => {\r\n        // click scroll animation has 2 main parts:\r\n        // 1. the \"click\" which scrolls 100% of the viewport in a certain amount of time\r\n        // 2. the \"press\" which scrolls to the point where the cursor is located, the \"press\" always waits for the \"click\" to finish\r\n        // The \"click\" should not be canceled by a \"pointerup\" event because very fast clicks or taps would cancel it too fast\r\n        // The \"click\" should only be canceled by a subsequent \"pointerdown\" event because otherwise 2 animations would run\r\n        // The \"press\" should be canceld by the next \"pointerup\" event\r\n\r\n        let stopped = false;\r\n        let stopPressAnimation = noop;\r\n        const linearScrollMs = 133;\r\n        const easedScrollMs = 222;\r\n        const [setPressAnimationTimeout, clearPressAnimationTimeout] =\r\n          selfClearTimeout(linearScrollMs);\r\n        const targetOffsetSign = Math.sign(targetOffset);\r\n        const handleLengthWithTargetSign = handleLength * targetOffsetSign;\r\n        const handleLengthWithTargetSignHalf = handleLengthWithTargetSign / 2;\r\n        const easing = (x: number) => 1 - (1 - x) * (1 - x); // easeOutQuad;\r\n        const easedEndPressAnimation = (from: number, to: number) =>\r\n          animateNumber(from, to, easedScrollMs, moveHandleRelative, easing);\r\n        const linearPressAnimation = (linearFrom: number, msFactor: number) =>\r\n          animateNumber(\r\n            linearFrom,\r\n            targetOffset - handleLengthWithTargetSign,\r\n            linearScrollMs * msFactor,\r\n            (progress, _, completed) => {\r\n              moveHandleRelative(progress);\r\n\r\n              if (completed) {\r\n                stopPressAnimation = easedEndPressAnimation(progress, targetOffset);\r\n              }\r\n            }\r\n          );\r\n        const stopClickAnimation = animateNumber(\r\n          0,\r\n          handleLengthWithTargetSign,\r\n          easedScrollMs,\r\n          (clickAnimationProgress, _, clickAnimationCompleted) => {\r\n            moveHandleRelative(clickAnimationProgress);\r\n\r\n            if (clickAnimationCompleted) {\r\n              onClickScrollCompleted(stopped);\r\n\r\n              if (!stopped) {\r\n                const remainingScrollDistance = targetOffset - clickAnimationProgress;\r\n                const continueWithPress =\r\n                  Math.sign(remainingScrollDistance - handleLengthWithTargetSignHalf) ===\r\n                  targetOffsetSign;\r\n\r\n                continueWithPress &&\r\n                  setPressAnimationTimeout(() => {\r\n                    const remainingLinearScrollDistance =\r\n                      remainingScrollDistance - handleLengthWithTargetSign;\r\n                    const linearBridge =\r\n                      Math.sign(remainingLinearScrollDistance) === targetOffsetSign;\r\n\r\n                    stopPressAnimation = linearBridge\r\n                      ? linearPressAnimation(\r\n                          clickAnimationProgress,\r\n                          Math.abs(remainingLinearScrollDistance) / handleLength\r\n                        )\r\n                      : easedEndPressAnimation(clickAnimationProgress, targetOffset);\r\n                  });\r\n              }\r\n            }\r\n          },\r\n          easing\r\n        );\r\n\r\n        return (stopClick?: boolean) => {\r\n          stopped = true;\r\n\r\n          if (stopClick) {\r\n            stopClickAnimation();\r\n          }\r\n\r\n          clearPressAnimationTimeout();\r\n          stopPressAnimation();\r\n        };\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  appendChildren,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry | boolean) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        appear = domRectAppeared(currRContentRect, prevContentRect);\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _sizeChanged: true,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  getOffsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = getOffsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  equalWH,\r\n  getFractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  keys,\r\n  liesBetween,\r\n  getScrollSize,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n  getStyles,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportMeasuring,\r\n  dataValueViewportArrange,\r\n  dataValueNoClipping,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open', 'wrap', 'cols', 'rows'];\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _content,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n    _removeScrollObscuringStyles,\r\n  } = structureSetupElements;\r\n\r\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n      const noClipping =\r\n        !viewportIsTargetBody && hasAttrClass(_host, dataAttributeHost, dataValueNoClipping);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\r\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\r\n\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, noClipping);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n      const viewportScroll = getScrollSize(_viewport);\r\n      const fractional = getFractionalSize(_viewport);\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      revertScrollObscuringStyles && revertScrollObscuringStyles();\r\n      noClipping && revertMeasuring();\r\n\r\n      return {\r\n        w: viewportScroll.w + fractional.w,\r\n        h: viewportScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\r\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n    prevDirectionIsRTL = newDirectionIsRTL;\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && env._nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    }\r\n    /*\r\n    else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    */\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs,\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n  const onWindowResizeDebounced = debounce(\r\n    () => {\r\n      const [, _contentMutation] = updateContentSizeCache();\r\n      onObserversUpdated({ _contentMutation });\r\n    },\r\n    {\r\n      _timeout: 222,\r\n      _leading: true,\r\n    }\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      // updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = env._addResizeListener((_scrollbarSizeChanged) => {\r\n        if (_scrollbarSizeChanged) {\r\n          onObserversUpdatedDebounced({ _scrollbarSizeChanged });\r\n        } else {\r\n          onWindowResizeDebounced();\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(baseStyleChangingAttrs, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirection(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElementScroll,\r\n  numberToCssPx,\r\n  setStyles,\r\n  capNumber,\r\n  getScrollCoordinatesPercent,\r\n  isDefaultDirectionScrollCoordinates,\r\n  roundCssNumber,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { XY } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _refreshScrollbarsScrollCoordinates: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype ScrollbarStyleFn = (\r\n  scrollbarStructure: ScrollbarStructure\r\n) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const cssCustomPropViewportPercent = '--os-viewport-percent';\r\n  const cssCustomPropScrollPercent = '--os-scroll-percent';\r\n  const cssCustomPropScrollDirection = '--os-scroll-direction';\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  const initScrollTimeline = (axis: keyof XY<unknown>) => {\r\n    if (scrollT) {\r\n      const timeline = new scrollT({\r\n        source: _scrollOffsetElement,\r\n        axis,\r\n      });\r\n\r\n      const _addScrollPercentAnimation = (structure: ScrollbarStructure) => {\r\n        const scrollPercentAnimation = structure._scrollbar.animate(\r\n          {\r\n            // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\r\n            clear: ['left'],\r\n            [cssCustomPropScrollPercent]: [0, 1],\r\n          },\r\n          {\r\n            timeline,\r\n          }\r\n        );\r\n        return () => scrollPercentAnimation.cancel();\r\n      };\r\n\r\n      return {\r\n        _addScrollPercentAnimation,\r\n      };\r\n    }\r\n  };\r\n  const scrollTimeline = {\r\n    x: initScrollTimeline('x'),\r\n    y: initScrollTimeline('y'),\r\n  };\r\n  const getViewportPercent = () => {\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n    const getAxisValue = (axisViewportSize: number, axisOverflowAmount: number) =>\r\n      capNumber(0, 1, axisViewportSize / (axisViewportSize + axisOverflowAmount) || 0);\r\n\r\n    return {\r\n      x: getAxisValue(_overflowEdge.x, _overflowAmount.x),\r\n      y: getAxisValue(_overflowEdge.y, _overflowAmount.y),\r\n    };\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: ScrollbarStyleFn\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    const viewportPercent = getViewportPercent();\r\n    const createScrollbarStyleFn =\r\n      (axisViewportPercent: number): ScrollbarStyleFn =>\r\n      (structure: ScrollbarStructure) =>\r\n        [\r\n          structure._scrollbar,\r\n          {\r\n            [cssCustomPropViewportPercent]: roundCssNumber(axisViewportPercent) + '',\r\n          },\r\n        ];\r\n\r\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(viewportPercent.x));\r\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(viewportPercent.y));\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    if (!scrollT) {\r\n      const { _scrollCoordinates } = structureSetupState;\r\n      const scrollPercent = getScrollCoordinatesPercent(\r\n        _scrollCoordinates,\r\n        getElementScroll(_scrollOffsetElement)\r\n      );\r\n      const createScrollbarStyleFn =\r\n        (axisScrollPercent: number): ScrollbarStyleFn =>\r\n        (structure: ScrollbarStructure) =>\r\n          [\r\n            structure._scrollbar,\r\n            {\r\n              [cssCustomPropScrollPercent]: roundCssNumber(axisScrollPercent) + '',\r\n            },\r\n          ];\r\n\r\n      scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(scrollPercent.x));\r\n      scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(scrollPercent.y));\r\n    }\r\n  };\r\n  const refreshScrollbarsScrollCoordinates = () => {\r\n    const { _scrollCoordinates } = structureSetupState;\r\n    const defaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n    const createScrollbarStyleFn =\r\n      (axisIsDefaultDirectionScrollCoordinates: boolean): ScrollbarStyleFn =>\r\n      (structure: ScrollbarStructure) =>\r\n        [\r\n          structure._scrollbar,\r\n          {\r\n            [cssCustomPropScrollDirection]: axisIsDefaultDirectionScrollCoordinates ? '0' : '1',\r\n          },\r\n        ];\r\n\r\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.x));\r\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.y));\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget && !_isBody) {\r\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\r\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n      const scrollPercent = getScrollCoordinatesPercent(\r\n        _scrollCoordinates,\r\n        getElementScroll(_scrollOffsetElement)\r\n      );\r\n      const styleScrollbarPosition: ScrollbarStyleFn = (structure: ScrollbarStructure) => {\r\n        const { _scrollbar } = structure;\r\n        const elm = parent(_scrollbar) === _viewport && _scrollbar;\r\n        const getTranslateValue = (\r\n          axisScrollPercent: number,\r\n          axisOverflowAmount: number,\r\n          axisIsDefaultCoordinates: boolean\r\n        ) => {\r\n          const px = axisOverflowAmount * axisScrollPercent;\r\n          return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\r\n        };\r\n\r\n        return [\r\n          elm,\r\n          elm && {\r\n            transform: getTrasformTranslateValue({\r\n              x: getTranslateValue(scrollPercent.x, _overflowAmount.x, isDefaultDirectionScroll.x),\r\n              y: getTranslateValue(scrollPercent.y, _overflowAmount.y, isDefaultDirectionScroll.y),\r\n            }),\r\n          },\r\n        ];\r\n      };\r\n\r\n      scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n      scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n    const timeline = scrollTimeline[xyKey];\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      timeline && timeline._addScrollPercentAnimation(result),\r\n      scrollbarsSetupEvents(result, scrollbarsAddRemoveClass, isHorizontal),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollCoordinates: refreshScrollbarsScrollCoordinates,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n  stopAndPrevent,\r\n  isFunction,\r\n  mathAbs,\r\n  focusElement,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n} from '~/classnames';\r\nimport type { XY } from '~/support';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  return (scrollbarStructure, scrollbarsAddRemoveClass, isHorizontal) => {\r\n    const {\r\n      _host,\r\n      _viewport,\r\n      _viewportIsTarget,\r\n      _scrollOffsetElement,\r\n      _documentElm,\r\n      _removeScrollObscuringStyles,\r\n    } = structureSetupElements;\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\r\n      selfClearTimeout(444);\r\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\r\n      isFunction(_scrollOffsetElement.scrollBy) &&\r\n        _scrollOffsetElement.scrollBy({\r\n          behavior: 'smooth',\r\n          left: coordinates.x,\r\n          top: coordinates.y,\r\n        });\r\n    };\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\r\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n      const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n      const leftTopKey = isHorizontal ? 'left' : 'top';\r\n      const whKey = isHorizontal ? 'w' : 'h';\r\n      const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n      const pointerdownCleanupFns: Array<() => void> = [];\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const dragClickScrollOption = scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'];\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          dragClickScrollOption &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          runEachAndClear(pointerdownCleanupFns);\r\n          clearScrollSnapScrollTransitionTimeout();\r\n\r\n          const instantClickScroll =\r\n            !isDragScroll && (pointerDownEvent.shiftKey || dragClickScrollOption === 'instant');\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElementScroll(_scrollOffsetElement)[xyKey],\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(pointerupCleanupFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const nonAnimatedScroll = isDragScroll || instantClickScroll;\r\n          const revertScrollObscuringStyles = _removeScrollObscuringStyles();\r\n\r\n          const pointerupCleanupFns = [\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            nonAnimatedScroll &&\r\n              addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) =>\r\n                moveHandleRelative(\r\n                  startOffset + (pointerMoveEvent[clientXYKey] - pointerDownOffset)\r\n                )\r\n              ),\r\n            nonAnimatedScroll &&\r\n              (() => {\r\n                const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n                revertScrollObscuringStyles();\r\n                const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n                const snapScrollDiff = {\r\n                  x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\r\n                  y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\r\n                };\r\n\r\n                if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\r\n                  _removeScrollObscuringStyles();\r\n                  scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\r\n                  scrollOffsetElementScrollBy(snapScrollDiff);\r\n                  scrollSnapScrollTransitionTimeout(revertScrollObscuringStyles);\r\n                }\r\n              }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n            if (animateClickScroll) {\r\n              const stopClickScrollAnimation = animateClickScroll(\r\n                moveHandleRelative,\r\n                startOffset,\r\n                handleLength,\r\n                (stopped) => {\r\n                  // if the scroll animation doesn't continue with a press\r\n                  if (stopped) {\r\n                    revertScrollObscuringStyles();\r\n                  } else {\r\n                    push(pointerupCleanupFns, revertScrollObscuringStyles);\r\n                  }\r\n                }\r\n              );\r\n\r\n              push(pointerupCleanupFns, stopClickScrollAnimation);\r\n              push(pointerdownCleanupFns, bind(stopClickScrollAnimation, true));\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar (mouse only)\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(bind(focusElement, _viewport), 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            scrollOffsetElementScrollBy({\r\n              x: deltaX,\r\n              y: deltaY,\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // solve problem of interaction causing click events\r\n      addEventListener(\r\n        _scrollbar,\r\n        'pointerdown',\r\n        // stopPropagation for stopping event propagation (causing click listeners to be invoked)\r\n        // preventDefault to prevent the pointer to cause any actions (e.g. releasing mouse button over an <a> tag causes an navigation)\r\n        bind(addEventListener, _documentElm, 'click', stopAndPrevent, {\r\n          _once: true,\r\n          _capture: true,\r\n          _passive: false,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      clearScrollSnapScrollTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import {\r\n  bind,\r\n  noop,\r\n  addEventListener,\r\n  push,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  strScroll,\r\n  strVisible,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) =>\r\n        isHoverablePointerType(event) &&\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollCoordinates,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _scrollCoordinatesChanged,\r\n      } = _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged ||\r\n        _overflowAmountChanged ||\r\n        _scrollCoordinatesChanged ||\r\n        _directionChanged ||\r\n        _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes(strScroll) &&\r\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, !!clickScroll);\r\n      }\r\n\r\n      // always update scrollbar visibility before scrollbar size\r\n      // the scrollbar size is influenced whether both or just one scrollbar is visible (because of the corner element)\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      // always update scrollbar sizes after the visibility\r\n      if (updateScrollbars) {\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsScrollbarOffset();\r\n        _scrollCoordinatesChanged && _refreshScrollbarsScrollCoordinates();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  contents,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n  wnd,\r\n  focusElement,\r\n  stopAndPrevent,\r\n  getOffsetSize,\r\n  getScrollSize,\r\n  getStyles,\r\n  strOverflowX,\r\n  strOverflowY,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataAttributeHtmlBody,\r\n  dataValueHostIsHost,\r\n  dataValueViewportScrolling,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport { overflowIsVisible } from './structureSetup.utils';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isBody: boolean;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _windowElm: () => Window;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\r\n  _removeScrollObscuringStyles: () => () => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const elementHasOverflow = (elm: HTMLElement) => {\r\n    const offsetSize = getOffsetSize(elm);\r\n    const scrollSize = getScrollSize(elm);\r\n    const overflowX = getStyles(elm, strOverflowX);\r\n    const overflowY = getStyles(elm, strOverflowY);\r\n\r\n    return (\r\n      (scrollSize.w - offsetSize.w > 0 && !overflowIsVisible(overflowX)) ||\r\n      (scrollSize.h - offsetSize.h > 0 && !overflowIsVisible(overflowY))\r\n    );\r\n  };\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const hostElement = viewportIsTargetBody ? viewportElement : targetElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement =\r\n    !elementIsGenerated(viewportElement) && elementHasOverflow(viewportElement)\r\n      ? viewportElement\r\n      : targetElement;\r\n  const scrollOffsetElement = viewportIsTargetBody ? docElement : viewportElement;\r\n  const scrollEventElement = viewportIsTargetBody ? ownerDocument : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: scrollOffsetElement,\r\n    _scrollEventElement: scrollEventElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _documentElm: ownerDocument,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _windowElm: getDocumentWindow,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\r\n    _removeScrollObscuringStyles: () =>\r\n      addRemoveAttrClass(\r\n        scrollOffsetElement,\r\n        dataAttributeViewport,\r\n        dataValueViewportScrolling,\r\n        true\r\n      ),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  let targetContents = contents(\r\n    [_content, _viewport, _padding, _host, _target].find((elm) => elm && !elementIsGenerated(elm))\r\n  );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const docWnd = getDocumentWindow();\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement: Element | false | null | undefined) =>\r\n      addEventListener(activeElement, 'focusin focusout focus blur', stopAndPrevent, {\r\n        _capture: true,\r\n        _passive: false,\r\n      });\r\n    const tabIndexStr = 'tabindex';\r\n    const originalViewportTabIndex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_viewport, dataAttributeViewport, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, tabIndexStr, originalViewportTabIndex || '-1');\r\n      isBody && setAttrs(docElement, dataAttributeHtmlBody, '');\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const viewportIsGenerated = elementIsGenerated(_viewport);\r\n        // if the focused element is viewport and viewport will be destroyed shift the focus to target\r\n        // otherwise keep the focused element\r\n        const destroyFocusElement =\r\n          viewportIsGenerated && destroyActiveElm === _viewport ? _target : destroyActiveElm;\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyFocusElement);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, dataAttributeViewport);\r\n        isBody && removeAttrs(docElement, dataAttributeHtmlBody);\r\n        originalViewportTabIndex\r\n          ? setAttrs(_viewport, tabIndexStr, originalViewportTabIndex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        viewportIsGenerated && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElement(destroyFocusElement);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // keep the original focused element focused except when\r\n    // the target is body and viewport is not target, then shift the focus to the viewport element\r\n    focusElement(\r\n      !viewportIsTarget && isBody && initActiveElm === _target && docWnd.top === docWnd\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  getScrollSize,\r\n  getFractionalSize,\r\n  equalWH,\r\n  getClientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  getWindowSize,\r\n  addRemoveAttrClass,\r\n  capitalizeFirstLetter,\r\n  setStyles,\r\n  strVisible,\r\n  strHidden,\r\n  keys,\r\n  strScroll,\r\n  scrollElementTo,\r\n  getElementScroll,\r\n  sanitizeScrollCoordinates,\r\n  getStyles,\r\n  equal,\r\n  getZeroScrollCoordinates,\r\n  hasDimensions,\r\n  addEventListener,\r\n  stopPropagation,\r\n  rAF,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueNoClipping,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataValueViewportOverflowXPrefix,\r\n  dataValueViewportOverflowYPrefix,\r\n  dataValueViewportNoContent,\r\n  dataValueViewportMeasuring,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { ScrollCoordinates, WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport {\r\n  createViewportOverflowState,\r\n  getShowNativeOverlaidScrollbars,\r\n  overflowIsVisible,\r\n} from '../structureSetup.utils';\r\n\r\ninterface FlowDirectionStyles {\r\n  display?: string;\r\n  direction?: string;\r\n  flexDirection?: string;\r\n  writingMode?: string;\r\n}\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _scrollEventElement,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportAddRemoveClass,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n  const flowDirectionCanBeNonDefaultMap: Record<\r\n    keyof FlowDirectionStyles,\r\n    (styleValue: string) => boolean\r\n  > = {\r\n    display: () => false,\r\n    direction: (directionStyle) => directionStyle !== 'ltr',\r\n    flexDirection: (flexDirectionStyle) => flexDirectionStyle.endsWith('-reverse'),\r\n    writingMode: (writingModeStyle) => writingModeStyle !== 'horizontal-tb',\r\n  };\r\n  const flowDirectionStyleArr = keys(flowDirectionCanBeNonDefaultMap) as Array<\r\n    keyof FlowDirectionStyles\r\n  >;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const partialXYOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: {},\r\n  };\r\n\r\n  const setMeasuringMode = (active: boolean) => {\r\n    // viewportIsTargetBody never needs measuring\r\n    _viewportAddRemoveClass(dataValueViewportMeasuring, !viewportIsTargetBody && active);\r\n  };\r\n\r\n  const getMeasuredScrollCoordinates = (flowDirectionStyles: FlowDirectionStyles) => {\r\n    const flowDirectionCanBeNonDefault = flowDirectionStyleArr.some((styleName) => {\r\n      const styleValue = flowDirectionStyles[styleName];\r\n      return styleValue && flowDirectionCanBeNonDefaultMap[styleName](styleValue);\r\n    });\r\n\r\n    // if the direction can not be non-default return default scroll coordinates (only the sign of the numbers matters)\r\n    if (!flowDirectionCanBeNonDefault) {\r\n      return {\r\n        _start: { x: 0, y: 0 },\r\n        _end: { x: 1, y: 1 },\r\n      };\r\n    }\r\n\r\n    setMeasuringMode(true);\r\n\r\n    const originalScrollOffset = getElementScroll(_scrollOffsetElement);\r\n    const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\r\n    const removeScrollBlock = addEventListener(\r\n      _scrollEventElement,\r\n      strScroll,\r\n      (event) => {\r\n        const scrollEventScrollOffset = getElementScroll(_scrollOffsetElement);\r\n        // if scroll offset didnt change\r\n        if (\r\n          event.isTrusted &&\r\n          scrollEventScrollOffset.x === originalScrollOffset.x &&\r\n          scrollEventScrollOffset.y === originalScrollOffset.y\r\n        ) {\r\n          stopPropagation(event);\r\n        }\r\n      },\r\n      {\r\n        _capture: true,\r\n        _once: true,\r\n      }\r\n    );\r\n\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: 0,\r\n      y: 0,\r\n    });\r\n    removeNoContent();\r\n\r\n    const _start = getElementScroll(_scrollOffsetElement);\r\n    const scrollSize = getScrollSize(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: scrollSize.w,\r\n      y: scrollSize.h,\r\n    });\r\n\r\n    const tmp = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\r\n      x: tmp.x - _start.x < 1 && -scrollSize.w,\r\n      y: tmp.y - _start.y < 1 && -scrollSize.h,\r\n    });\r\n\r\n    const _end = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, originalScrollOffset);\r\n    rAF(() => removeScrollBlock());\r\n\r\n    return {\r\n      _start,\r\n      _end,\r\n    };\r\n  };\r\n  const getOverflowAmount = (\r\n    viewportScrollSize: WH<number>,\r\n    viewportClientSize: WH<number>\r\n  ): WH<number> => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(getFractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(getScrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\r\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>(\r\n    {\r\n      _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\r\n      _initialValue: {},\r\n    },\r\n    () => (hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {})\r\n  );\r\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\r\n    createCache<ScrollCoordinates>({\r\n      _equal: (currVal, newVal) =>\r\n        equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\r\n      _initialValue: getZeroScrollCoordinates(),\r\n    });\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const createViewportOverflowStyleClassName = (\r\n    overflowStyle: OverflowStyle,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const prefix = isHorizontal\r\n      ? dataValueViewportOverflowXPrefix\r\n      : dataValueViewportOverflowYPrefix;\r\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\r\n  };\r\n  const setViewportOverflowStyle = (viewportOverflowStyle: XY<OverflowStyle>) => {\r\n    // `createAllOverflowStyleClassNames` and `allOverflowStyleClassNames` could be one scope further up but would increase bundle size\r\n    const createAllOverflowStyleClassNames = (isHorizontal?: boolean) =>\r\n      ([strVisible, strHidden, strScroll] as OverflowStyle[]).map((style) =>\r\n        createViewportOverflowStyleClassName(style, isHorizontal)\r\n      );\r\n    const allOverflowStyleClassNames = createAllOverflowStyleClassNames(true)\r\n      .concat(createAllOverflowStyleClassNames())\r\n      .join(' ');\r\n\r\n    _viewportAddRemoveClass(allOverflowStyleClassNames);\r\n    _viewportAddRemoveClass(\r\n      (keys(viewportOverflowStyle) as Array<keyof typeof viewportOverflowStyle>)\r\n        .map((axis) =>\r\n          createViewportOverflowStyleClassName(viewportOverflowStyle[axis], axis === 'x')\r\n        )\r\n        .join(' '),\r\n      true\r\n    );\r\n  };\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const { _sizeChanged, _contentMutation, _directionChanged, _appear, _scrollbarSizeChanged } =\r\n      _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n\r\n    const viewportChanged =\r\n      true ||\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (viewportChanged) {\r\n      if (hasAttrClass(_host, dataAttributeHost, dataValueNoClipping)) {\r\n        setMeasuringMode(true);\r\n      }\r\n\r\n      const [redoViewportArrange] = _undoViewportArrange ? _undoViewportArrange() : [];\r\n\r\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = getClientSize(_viewport);\r\n      const windowInnerSize = viewportIsTargetBody && getWindowSize(_windowElm());\r\n      const overflowAmountScrollSize = {\r\n        w: max0(viewportScrollSize.w + sizeFraction.w),\r\n        h: max0(viewportScrollSize.h + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.w\r\n            : viewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.h\r\n            : viewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    });\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      viewportChanged;\r\n    const viewportOverflowState = createViewportOverflowState(hasOverflow, overflow);\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      viewportOverflowState._overflowStyle\r\n    );\r\n    const [flowDirectionStyles, flowDirectionStylesChanged] = updateFlowDirectionStyles(_force);\r\n\r\n    const adjustMeasuredScrollCoordinates =\r\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\r\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\r\n      ? updateMeasuredScrollCoordinates(getMeasuredScrollCoordinates(flowDirectionStyles), _force)\r\n      : getCurrentMeasuredScrollCoordinates();\r\n\r\n    if (adjustViewportStyle) {\r\n      overflowStyleChanged && setViewportOverflowStyle(viewportOverflowState._overflowStyle);\r\n\r\n      if (_hideNativeScrollbars && _arrangeViewport) {\r\n        setStyles(\r\n          _viewport,\r\n          _hideNativeScrollbars(\r\n            viewportOverflowState,\r\n            _observersState,\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction)\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    setMeasuringMode(false);\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\r\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n      _scrollCoordinates: sanitizeScrollCoordinates(scrollCoordinates, overflowAmount),\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\r\n      _scrolled: adjustMeasuredScrollCoordinates,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElementScroll,\r\n  getZeroScrollCoordinates,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport type { ScrollCoordinates } from '~/support';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _scrollCoordinates: ScrollCoordinates;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n  _scrollCoordinatesChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n    _scrollCoordinates: getZeroScrollCoordinates(),\r\n  };\r\n  const { _target, _scrollOffsetElement, _viewportIsTarget, _removeScrollObscuringStyles } =\r\n    elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\r\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      revertScrollObscuringStyles && revertScrollObscuringStyles();\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElementScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  isDestroyed: () => boolean,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  let cacheAndOptionsInitialized = false;\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    if (isDestroyed()) {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce || !cacheAndOptionsInitialized;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    cacheAndOptionsInitialized = true;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _scrollOffsetElement, _removeScrollObscuringStyles } =\r\n        structureSetupElements;\r\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n      const revertScrollObscuringStyles = _removeScrollObscuringStyles();\r\n\r\n      scrollElementTo(_scrollOffsetElement, initialScroll);\r\n      revertScrollObscuringStyles();\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { setNonce } from './nonce';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n  /**\r\n   * Sets the nonce attribute for inline styles.\r\n   */\r\n  nonce(newNonce: string | undefined): void;\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** The scroll coordinates of the viewport. */\r\n  scrollCoordinates: {\r\n    /** The start (origin) scroll coordinates for each axis. */\r\n    start: XY<number>;\r\n    /** The end scroll coordinates for each axis. */\r\n    end: XY<number>;\r\n  };\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        () => destroyed,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const {\r\n            _overflowEdgeChanged,\r\n            _overflowAmountChanged,\r\n            _overflowStyleChanged,\r\n            _scrollCoordinatesChanged,\r\n          } = _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _scrollCoordinates,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            scrollCoordinates: {\r\n              start: _scrollCoordinates._start,\r\n              end: _scrollCoordinates._end,\r\n            },\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update();\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\nOverlayScrollbars.nonce = setNonce;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}